#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Dec 25 20:02:14 2017 by generateDS.py version 2.29.3.
# Python 2.7.10 (default, Jul 15 2017, 17:16:57)  [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)]
#
# Command line options:
#   ('-o', 'xacml_wd17v2.py')
#   ('--root-element', 'Policy')
#   ('--no-namespace-defs', '')
#   ('--fix-type-names', 'PolicyType:Policy')
#   ('--preserve-cdata-tags', '')
#
# Command line arguments:
#   xacml-core-v3-schema-wd-17.xsd
#
# Command line:
#   /Users/welkson/Envs/suap/bin/generateDS -o "xacml_wd17v2.py" --root-element="Policy" --no-namespace-defs --fix-type-names="PolicyType:Policy" --preserve-cdata-tags xacml-core-v3-schema-wd-17.xsd
#
# Current working directory (os.getcwd()):
#   XACML_XSD_Model
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None
PRESERVE_CDATA_TAGS_PAT = re_.compile(r'^<.+?>(.*)<.+>$')


#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


PRESERVE_CDATA_TAGS_PAT1 = re_.compile(
    r'^<.+?>(.*?)</?[a-zA-Z0-9\-]+>(?!.*</?[a-zA-Z0-9\-]+>)')
PRESERVE_CDATA_TAGS_PAT2 = re_.compile(r'^<.+?>.*?</.+?>(.*)$')


def get_all_text_(node):
    if node.text is not None:
        mo_ = PRESERVE_CDATA_TAGS_PAT1.search(etree_.tostring(node).strip())
        if mo_ is not None:
            text = mo_.group(1)
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            mo_ = PRESERVE_CDATA_TAGS_PAT2.search(
                etree_.tostring(child).strip())
            if mo_ is not None:
                text += mo_.group(1)
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class RequestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReturnPolicyIdList=None, CombinedDecision=None, RequestDefaults=None, Attributes=None, MultiRequests=None):
        self.original_tagname_ = None
        self.ReturnPolicyIdList = _cast(bool, ReturnPolicyIdList)
        self.CombinedDecision = _cast(bool, CombinedDecision)
        self.RequestDefaults = RequestDefaults
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.MultiRequests = MultiRequests
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestType.subclass:
            return RequestType.subclass(*args_, **kwargs_)
        else:
            return RequestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestDefaults(self): return self.RequestDefaults
    def set_RequestDefaults(self, RequestDefaults): self.RequestDefaults = RequestDefaults
    def get_Attributes(self): return self.Attributes
    def set_Attributes(self, Attributes): self.Attributes = Attributes
    def add_Attributes(self, value): self.Attributes.append(value)
    def insert_Attributes_at(self, index, value): self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value): self.Attributes[index] = value
    def get_MultiRequests(self): return self.MultiRequests
    def set_MultiRequests(self, MultiRequests): self.MultiRequests = MultiRequests
    def get_ReturnPolicyIdList(self): return self.ReturnPolicyIdList
    def set_ReturnPolicyIdList(self, ReturnPolicyIdList): self.ReturnPolicyIdList = ReturnPolicyIdList
    def get_CombinedDecision(self): return self.CombinedDecision
    def set_CombinedDecision(self, CombinedDecision): self.CombinedDecision = CombinedDecision
    def hasContent_(self):
        if (
            self.RequestDefaults is not None or
            self.Attributes or
            self.MultiRequests is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RequestType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RequestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RequestType'):
        if self.ReturnPolicyIdList is not None and 'ReturnPolicyIdList' not in already_processed:
            already_processed.add('ReturnPolicyIdList')
            outfile.write(' ReturnPolicyIdList="%s"' % self.gds_format_boolean(self.ReturnPolicyIdList, input_name='ReturnPolicyIdList'))
        if self.CombinedDecision is not None and 'CombinedDecision' not in already_processed:
            already_processed.add('CombinedDecision')
            outfile.write(' CombinedDecision="%s"' % self.gds_format_boolean(self.CombinedDecision, input_name='CombinedDecision'))
    def exportChildren(self, outfile, level, namespace_='', name_='RequestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RequestDefaults is not None:
            self.RequestDefaults.export(outfile, level, namespace_='', name_='RequestDefaults', pretty_print=pretty_print)
        for Attributes_ in self.Attributes:
            Attributes_.export(outfile, level, namespace_='', name_='Attributes', pretty_print=pretty_print)
        if self.MultiRequests is not None:
            self.MultiRequests.export(outfile, level, namespace_='', name_='MultiRequests', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ReturnPolicyIdList', node)
        if value is not None and 'ReturnPolicyIdList' not in already_processed:
            already_processed.add('ReturnPolicyIdList')
            if value in ('true', '1'):
                self.ReturnPolicyIdList = True
            elif value in ('false', '0'):
                self.ReturnPolicyIdList = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('CombinedDecision', node)
        if value is not None and 'CombinedDecision' not in already_processed:
            already_processed.add('CombinedDecision')
            if value in ('true', '1'):
                self.CombinedDecision = True
            elif value in ('false', '0'):
                self.CombinedDecision = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestDefaults':
            obj_ = RequestDefaultsType.factory()
            obj_.build(child_)
            self.RequestDefaults = obj_
            obj_.original_tagname_ = 'RequestDefaults'
        elif nodeName_ == 'Attributes':
            obj_ = AttributesType.factory()
            obj_.build(child_)
            self.Attributes.append(obj_)
            obj_.original_tagname_ = 'Attributes'
        elif nodeName_ == 'MultiRequests':
            obj_ = MultiRequestsType.factory()
            obj_.build(child_)
            self.MultiRequests = obj_
            obj_.original_tagname_ = 'MultiRequests'
# end class RequestType


class RequestDefaultsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, XPathVersion=None):
        self.original_tagname_ = None
        self.XPathVersion = XPathVersion
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestDefaultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestDefaultsType.subclass:
            return RequestDefaultsType.subclass(*args_, **kwargs_)
        else:
            return RequestDefaultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_XPathVersion(self): return self.XPathVersion
    def set_XPathVersion(self, XPathVersion): self.XPathVersion = XPathVersion
    def hasContent_(self):
        if (
            self.XPathVersion is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RequestDefaultsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestDefaultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestDefaultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RequestDefaultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RequestDefaultsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RequestDefaultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.XPathVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:XPathVersion>%s</xacml:XPathVersion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.XPathVersion), input_name='XPathVersion')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'XPathVersion':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            XPathVersion_ = mo_.group(1)
            XPathVersion_ = self.gds_validate_string(XPathVersion_, node, 'XPathVersion')
            self.XPathVersion = XPathVersion_
# end class RequestDefaultsType


class ResponseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Result=None):
        self.original_tagname_ = None
        if Result is None:
            self.Result = []
        else:
            self.Result = Result
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResponseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResponseType.subclass:
            return ResponseType.subclass(*args_, **kwargs_)
        else:
            return ResponseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Result(self): return self.Result
    def set_Result(self, Result): self.Result = Result
    def add_Result(self, value): self.Result.append(value)
    def insert_Result_at(self, index, value): self.Result.insert(index, value)
    def replace_Result_at(self, index, value): self.Result[index] = value
    def hasContent_(self):
        if (
            self.Result
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ResponseType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResponseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResponseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ResponseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ResponseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResponseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Result_ in self.Result:
            Result_.export(outfile, level, namespace_='', name_='Result', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Result':
            obj_ = ResultType.factory()
            obj_.build(child_)
            self.Result.append(obj_)
            obj_.original_tagname_ = 'Result'
# end class ResponseType


class ContentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType.subclass:
            return ContentType.subclass(*args_, **kwargs_)
        else:
            return ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ContentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContentType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContentType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ContentType


class ResultType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Decision=None, Status=None, Obligations=None, AssociatedAdvice=None, Attributes=None, PolicyIdentifierList=None):
        self.original_tagname_ = None
        self.Decision = Decision
        self.Status = Status
        self.Obligations = Obligations
        self.AssociatedAdvice = AssociatedAdvice
        if Attributes is None:
            self.Attributes = []
        else:
            self.Attributes = Attributes
        self.PolicyIdentifierList = PolicyIdentifierList
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResultType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResultType.subclass:
            return ResultType.subclass(*args_, **kwargs_)
        else:
            return ResultType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Decision(self): return self.Decision
    def set_Decision(self, Decision): self.Decision = Decision
    def get_Status(self): return self.Status
    def set_Status(self, Status): self.Status = Status
    def get_Obligations(self): return self.Obligations
    def set_Obligations(self, Obligations): self.Obligations = Obligations
    def get_AssociatedAdvice(self): return self.AssociatedAdvice
    def set_AssociatedAdvice(self, AssociatedAdvice): self.AssociatedAdvice = AssociatedAdvice
    def get_Attributes(self): return self.Attributes
    def set_Attributes(self, Attributes): self.Attributes = Attributes
    def add_Attributes(self, value): self.Attributes.append(value)
    def insert_Attributes_at(self, index, value): self.Attributes.insert(index, value)
    def replace_Attributes_at(self, index, value): self.Attributes[index] = value
    def get_PolicyIdentifierList(self): return self.PolicyIdentifierList
    def set_PolicyIdentifierList(self, PolicyIdentifierList): self.PolicyIdentifierList = PolicyIdentifierList
    def hasContent_(self):
        if (
            self.Decision is not None or
            self.Status is not None or
            self.Obligations is not None or
            self.AssociatedAdvice is not None or
            self.Attributes or
            self.PolicyIdentifierList is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ResultType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResultType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResultType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ResultType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ResultType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResultType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Decision is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:Decision>%s</xacml:Decision>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Decision), input_name='Decision')), eol_))
        if self.Status is not None:
            self.Status.export(outfile, level, namespace_='', name_='Status', pretty_print=pretty_print)
        if self.Obligations is not None:
            self.Obligations.export(outfile, level, namespace_='', name_='Obligations', pretty_print=pretty_print)
        if self.AssociatedAdvice is not None:
            self.AssociatedAdvice.export(outfile, level, namespace_='', name_='AssociatedAdvice', pretty_print=pretty_print)
        for Attributes_ in self.Attributes:
            Attributes_.export(outfile, level, namespace_='', name_='Attributes', pretty_print=pretty_print)
        if self.PolicyIdentifierList is not None:
            self.PolicyIdentifierList.export(outfile, level, namespace_='', name_='PolicyIdentifierList', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Decision':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            Decision_ = mo_.group(1)
            Decision_ = self.gds_validate_string(Decision_, node, 'Decision')
            self.Decision = Decision_
        elif nodeName_ == 'Status':
            obj_ = StatusType.factory()
            obj_.build(child_)
            self.Status = obj_
            obj_.original_tagname_ = 'Status'
        elif nodeName_ == 'Obligations':
            obj_ = ObligationsType.factory()
            obj_.build(child_)
            self.Obligations = obj_
            obj_.original_tagname_ = 'Obligations'
        elif nodeName_ == 'AssociatedAdvice':
            obj_ = AssociatedAdviceType.factory()
            obj_.build(child_)
            self.AssociatedAdvice = obj_
            obj_.original_tagname_ = 'AssociatedAdvice'
        elif nodeName_ == 'Attributes':
            obj_ = AttributesType.factory()
            obj_.build(child_)
            self.Attributes.append(obj_)
            obj_.original_tagname_ = 'Attributes'
        elif nodeName_ == 'PolicyIdentifierList':
            obj_ = PolicyIdentifierListType.factory()
            obj_.build(child_)
            self.PolicyIdentifierList = obj_
            obj_.original_tagname_ = 'PolicyIdentifierList'
# end class ResultType


class PolicyIdentifierListType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PolicyIdReference=None, PolicySetIdReference=None):
        self.original_tagname_ = None
        if PolicyIdReference is None:
            self.PolicyIdReference = []
        else:
            self.PolicyIdReference = PolicyIdReference
        if PolicySetIdReference is None:
            self.PolicySetIdReference = []
        else:
            self.PolicySetIdReference = PolicySetIdReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PolicyIdentifierListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PolicyIdentifierListType.subclass:
            return PolicyIdentifierListType.subclass(*args_, **kwargs_)
        else:
            return PolicyIdentifierListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PolicyIdReference(self): return self.PolicyIdReference
    def set_PolicyIdReference(self, PolicyIdReference): self.PolicyIdReference = PolicyIdReference
    def add_PolicyIdReference(self, value): self.PolicyIdReference.append(value)
    def insert_PolicyIdReference_at(self, index, value): self.PolicyIdReference.insert(index, value)
    def replace_PolicyIdReference_at(self, index, value): self.PolicyIdReference[index] = value
    def get_PolicySetIdReference(self): return self.PolicySetIdReference
    def set_PolicySetIdReference(self, PolicySetIdReference): self.PolicySetIdReference = PolicySetIdReference
    def add_PolicySetIdReference(self, value): self.PolicySetIdReference.append(value)
    def insert_PolicySetIdReference_at(self, index, value): self.PolicySetIdReference.insert(index, value)
    def replace_PolicySetIdReference_at(self, index, value): self.PolicySetIdReference[index] = value
    def hasContent_(self):
        if (
            self.PolicyIdReference or
            self.PolicySetIdReference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PolicyIdentifierListType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PolicyIdentifierListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PolicyIdentifierListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PolicyIdentifierListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PolicyIdentifierListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PolicyIdentifierListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for PolicyIdReference_ in self.PolicyIdReference:
            PolicyIdReference_.export(outfile, level, namespace_='', name_='PolicyIdReference', pretty_print=pretty_print)
        for PolicySetIdReference_ in self.PolicySetIdReference:
            PolicySetIdReference_.export(outfile, level, namespace_='', name_='PolicySetIdReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PolicyIdReference':
            obj_ = IdReferenceType.factory()
            obj_.build(child_)
            self.PolicyIdReference.append(obj_)
            obj_.original_tagname_ = 'PolicyIdReference'
        elif nodeName_ == 'PolicySetIdReference':
            obj_ = IdReferenceType.factory()
            obj_.build(child_)
            self.PolicySetIdReference.append(obj_)
            obj_.original_tagname_ = 'PolicySetIdReference'
# end class PolicyIdentifierListType


class StatusType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, StatusCode=None, StatusMessage=None, StatusDetail=None):
        self.original_tagname_ = None
        self.StatusCode = StatusCode
        self.StatusMessage = StatusMessage
        self.StatusDetail = StatusDetail
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusType.subclass:
            return StatusType.subclass(*args_, **kwargs_)
        else:
            return StatusType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_StatusMessage(self): return self.StatusMessage
    def set_StatusMessage(self, StatusMessage): self.StatusMessage = StatusMessage
    def get_StatusDetail(self): return self.StatusDetail
    def set_StatusDetail(self, StatusDetail): self.StatusDetail = StatusDetail
    def hasContent_(self):
        if (
            self.StatusCode is not None or
            self.StatusMessage is not None or
            self.StatusDetail is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StatusType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatusType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StatusType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StatusType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StatusType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_='', name_='StatusCode', pretty_print=pretty_print)
        if self.StatusMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:StatusMessage>%s</xacml:StatusMessage>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.StatusMessage), input_name='StatusMessage')), eol_))
        if self.StatusDetail is not None:
            self.StatusDetail.export(outfile, level, namespace_='', name_='StatusDetail', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = StatusCodeType.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
        elif nodeName_ == 'StatusMessage':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            StatusMessage_ = mo_.group(1)
            StatusMessage_ = self.gds_validate_string(StatusMessage_, node, 'StatusMessage')
            self.StatusMessage = StatusMessage_
        elif nodeName_ == 'StatusDetail':
            obj_ = StatusDetailType.factory()
            obj_.build(child_)
            self.StatusDetail = obj_
            obj_.original_tagname_ = 'StatusDetail'
# end class StatusType


class StatusCodeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Value=None, StatusCode=None):
        self.original_tagname_ = None
        self.Value = _cast(None, Value)
        self.StatusCode = StatusCode
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusCodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusCodeType.subclass:
            return StatusCodeType.subclass(*args_, **kwargs_)
        else:
            return StatusCodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StatusCode(self): return self.StatusCode
    def set_StatusCode(self, StatusCode): self.StatusCode = StatusCode
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.StatusCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StatusCodeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatusCodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusCodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StatusCodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StatusCodeType'):
        if self.Value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            outfile.write(' Value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Value), input_name='Value')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='StatusCodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StatusCode is not None:
            self.StatusCode.export(outfile, level, namespace_='', name_='StatusCode', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Value', node)
        if value is not None and 'Value' not in already_processed:
            already_processed.add('Value')
            self.Value = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StatusCode':
            obj_ = StatusCodeType.factory()
            obj_.build(child_)
            self.StatusCode = obj_
            obj_.original_tagname_ = 'StatusCode'
# end class StatusCodeType


class StatusDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anytypeobjs_=None):
        self.original_tagname_ = None
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StatusDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StatusDetailType.subclass:
            return StatusDetailType.subclass(*args_, **kwargs_)
        else:
            return StatusDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='StatusDetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StatusDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StatusDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='StatusDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='StatusDetailType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='StatusDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'StatusDetailType')
        if obj_ is not None:
            self.add_anytypeobjs_(obj_)
# end class StatusDetailType


class MissingAttributeDetailType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Category=None, AttributeId=None, DataType=None, Issuer=None, AttributeValue=None):
        self.original_tagname_ = None
        self.Category = _cast(None, Category)
        self.AttributeId = _cast(None, AttributeId)
        self.DataType = _cast(None, DataType)
        self.Issuer = _cast(None, Issuer)
        if AttributeValue is None:
            self.AttributeValue = []
        else:
            self.AttributeValue = AttributeValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MissingAttributeDetailType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MissingAttributeDetailType.subclass:
            return MissingAttributeDetailType.subclass(*args_, **kwargs_)
        else:
            return MissingAttributeDetailType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeValue(self): return self.AttributeValue
    def set_AttributeValue(self, AttributeValue): self.AttributeValue = AttributeValue
    def add_AttributeValue(self, value): self.AttributeValue.append(value)
    def insert_AttributeValue_at(self, index, value): self.AttributeValue.insert(index, value)
    def replace_AttributeValue_at(self, index, value): self.AttributeValue[index] = value
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_AttributeId(self): return self.AttributeId
    def set_AttributeId(self, AttributeId): self.AttributeId = AttributeId
    def get_DataType(self): return self.DataType
    def set_DataType(self, DataType): self.DataType = DataType
    def get_Issuer(self): return self.Issuer
    def set_Issuer(self, Issuer): self.Issuer = Issuer
    def hasContent_(self):
        if (
            self.AttributeValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MissingAttributeDetailType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MissingAttributeDetailType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MissingAttributeDetailType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MissingAttributeDetailType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MissingAttributeDetailType'):
        if self.Category is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            outfile.write(' Category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Category), input_name='Category')), ))
        if self.AttributeId is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            outfile.write(' AttributeId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AttributeId), input_name='AttributeId')), ))
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            outfile.write(' DataType=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DataType), input_name='DataType')), ))
        if self.Issuer is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            outfile.write(' Issuer=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Issuer), input_name='Issuer')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MissingAttributeDetailType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeValue_ in self.AttributeValue:
            AttributeValue_.export(outfile, level, namespace_='', name_='AttributeValue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Category', node)
        if value is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            self.Category = value
        value = find_attr_value_('AttributeId', node)
        if value is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            self.AttributeId = value
        value = find_attr_value_('DataType', node)
        if value is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            self.DataType = value
        value = find_attr_value_('Issuer', node)
        if value is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            self.Issuer = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AttributeValue.append(obj_)
            obj_.original_tagname_ = 'AttributeValue'
# end class MissingAttributeDetailType


class AttributesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Category=None, id=None, Content=None, Attribute=None):
        self.original_tagname_ = None
        self.Category = _cast(None, Category)
        self.id = _cast(None, id)
        self.Content = Content
        if Attribute is None:
            self.Attribute = []
        else:
            self.Attribute = Attribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributesType.subclass:
            return AttributesType.subclass(*args_, **kwargs_)
        else:
            return AttributesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Content(self): return self.Content
    def set_Content(self, Content): self.Content = Content
    def get_Attribute(self): return self.Attribute
    def set_Attribute(self, Attribute): self.Attribute = Attribute
    def add_Attribute(self, value): self.Attribute.append(value)
    def insert_Attribute_at(self, index, value): self.Attribute.insert(index, value)
    def replace_Attribute_at(self, index, value): self.Attribute[index] = value
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def hasContent_(self):
        if (
            self.Content is not None or
            self.Attribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttributesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributesType'):
        if self.Category is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            outfile.write(' Category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Category), input_name='Category')), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.id), input_name='id')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Content is not None:
            self.Content.export(outfile, level, namespace_='', name_='Content', pretty_print=pretty_print)
        for Attribute_ in self.Attribute:
            Attribute_.export(outfile, level, namespace_='', name_='Attribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Category', node)
        if value is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            self.Category = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Content':
            obj_ = ContentType.factory()
            obj_.build(child_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
        elif nodeName_ == 'Attribute':
            obj_ = AttributeType.factory()
            obj_.build(child_)
            self.Attribute.append(obj_)
            obj_.original_tagname_ = 'Attribute'
# end class AttributesType


class AttributeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AttributeId=None, Issuer=None, IncludeInResult=None, AttributeValue=None):
        self.original_tagname_ = None
        self.AttributeId = _cast(None, AttributeId)
        self.Issuer = _cast(None, Issuer)
        self.IncludeInResult = _cast(bool, IncludeInResult)
        if AttributeValue is None:
            self.AttributeValue = []
        else:
            self.AttributeValue = AttributeValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributeType.subclass:
            return AttributeType.subclass(*args_, **kwargs_)
        else:
            return AttributeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeValue(self): return self.AttributeValue
    def set_AttributeValue(self, AttributeValue): self.AttributeValue = AttributeValue
    def add_AttributeValue(self, value): self.AttributeValue.append(value)
    def insert_AttributeValue_at(self, index, value): self.AttributeValue.insert(index, value)
    def replace_AttributeValue_at(self, index, value): self.AttributeValue[index] = value
    def get_AttributeId(self): return self.AttributeId
    def set_AttributeId(self, AttributeId): self.AttributeId = AttributeId
    def get_Issuer(self): return self.Issuer
    def set_Issuer(self, Issuer): self.Issuer = Issuer
    def get_IncludeInResult(self): return self.IncludeInResult
    def set_IncludeInResult(self, IncludeInResult): self.IncludeInResult = IncludeInResult
    def hasContent_(self):
        if (
            self.AttributeValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttributeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributeType'):
        if self.AttributeId is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            outfile.write(' AttributeId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AttributeId), input_name='AttributeId')), ))
        if self.Issuer is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            outfile.write(' Issuer=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Issuer), input_name='Issuer')), ))
        if self.IncludeInResult is not None and 'IncludeInResult' not in already_processed:
            already_processed.add('IncludeInResult')
            outfile.write(' IncludeInResult="%s"' % self.gds_format_boolean(self.IncludeInResult, input_name='IncludeInResult'))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeValue_ in self.AttributeValue:
            AttributeValue_.export(outfile, level, namespace_='', name_='AttributeValue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('AttributeId', node)
        if value is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            self.AttributeId = value
        value = find_attr_value_('Issuer', node)
        if value is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            self.Issuer = value
        value = find_attr_value_('IncludeInResult', node)
        if value is not None and 'IncludeInResult' not in already_processed:
            already_processed.add('IncludeInResult')
            if value in ('true', '1'):
                self.IncludeInResult = True
            elif value in ('false', '0'):
                self.IncludeInResult = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AttributeValue.append(obj_)
            obj_.original_tagname_ = 'AttributeValue'
# end class AttributeType


class MultiRequestsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RequestReference=None):
        self.original_tagname_ = None
        if RequestReference is None:
            self.RequestReference = []
        else:
            self.RequestReference = RequestReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MultiRequestsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MultiRequestsType.subclass:
            return MultiRequestsType.subclass(*args_, **kwargs_)
        else:
            return MultiRequestsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RequestReference(self): return self.RequestReference
    def set_RequestReference(self, RequestReference): self.RequestReference = RequestReference
    def add_RequestReference(self, value): self.RequestReference.append(value)
    def insert_RequestReference_at(self, index, value): self.RequestReference.insert(index, value)
    def replace_RequestReference_at(self, index, value): self.RequestReference[index] = value
    def hasContent_(self):
        if (
            self.RequestReference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MultiRequestsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MultiRequestsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MultiRequestsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MultiRequestsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MultiRequestsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MultiRequestsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RequestReference_ in self.RequestReference:
            RequestReference_.export(outfile, level, namespace_='', name_='RequestReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RequestReference':
            obj_ = RequestReferenceType.factory()
            obj_.build(child_)
            self.RequestReference.append(obj_)
            obj_.original_tagname_ = 'RequestReference'
# end class MultiRequestsType


class RequestReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AttributesReference=None):
        self.original_tagname_ = None
        if AttributesReference is None:
            self.AttributesReference = []
        else:
            self.AttributesReference = AttributesReference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestReferenceType.subclass:
            return RequestReferenceType.subclass(*args_, **kwargs_)
        else:
            return RequestReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributesReference(self): return self.AttributesReference
    def set_AttributesReference(self, AttributesReference): self.AttributesReference = AttributesReference
    def add_AttributesReference(self, value): self.AttributesReference.append(value)
    def insert_AttributesReference_at(self, index, value): self.AttributesReference.insert(index, value)
    def replace_AttributesReference_at(self, index, value): self.AttributesReference[index] = value
    def hasContent_(self):
        if (
            self.AttributesReference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RequestReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RequestReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RequestReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RequestReferenceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RequestReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributesReference_ in self.AttributesReference:
            AttributesReference_.export(outfile, level, namespace_='', name_='AttributesReference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributesReference':
            obj_ = AttributesReferenceType.factory()
            obj_.build(child_)
            self.AttributesReference.append(obj_)
            obj_.original_tagname_ = 'AttributesReference'
# end class RequestReferenceType


class AttributesReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ReferenceId=None):
        self.original_tagname_ = None
        self.ReferenceId = _cast(None, ReferenceId)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributesReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributesReferenceType.subclass:
            return AttributesReferenceType.subclass(*args_, **kwargs_)
        else:
            return AttributesReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ReferenceId(self): return self.ReferenceId
    def set_ReferenceId(self, ReferenceId): self.ReferenceId = ReferenceId
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributesReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributesReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributesReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttributesReferenceType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributesReferenceType'):
        if self.ReferenceId is not None and 'ReferenceId' not in already_processed:
            already_processed.add('ReferenceId')
            outfile.write(' ReferenceId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ReferenceId), input_name='ReferenceId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributesReferenceType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ReferenceId', node)
        if value is not None and 'ReferenceId' not in already_processed:
            already_processed.add('ReferenceId')
            self.ReferenceId = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AttributesReferenceType


class ObligationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Obligation=None):
        self.original_tagname_ = None
        if Obligation is None:
            self.Obligation = []
        else:
            self.Obligation = Obligation
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObligationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObligationsType.subclass:
            return ObligationsType.subclass(*args_, **kwargs_)
        else:
            return ObligationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Obligation(self): return self.Obligation
    def set_Obligation(self, Obligation): self.Obligation = Obligation
    def add_Obligation(self, value): self.Obligation.append(value)
    def insert_Obligation_at(self, index, value): self.Obligation.insert(index, value)
    def replace_Obligation_at(self, index, value): self.Obligation[index] = value
    def hasContent_(self):
        if (
            self.Obligation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ObligationsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObligationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObligationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ObligationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ObligationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ObligationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Obligation_ in self.Obligation:
            Obligation_.export(outfile, level, namespace_='', name_='Obligation', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Obligation':
            obj_ = ObligationType.factory()
            obj_.build(child_)
            self.Obligation.append(obj_)
            obj_.original_tagname_ = 'Obligation'
# end class ObligationsType


class AssociatedAdviceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Advice=None):
        self.original_tagname_ = None
        if Advice is None:
            self.Advice = []
        else:
            self.Advice = Advice
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AssociatedAdviceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AssociatedAdviceType.subclass:
            return AssociatedAdviceType.subclass(*args_, **kwargs_)
        else:
            return AssociatedAdviceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Advice(self): return self.Advice
    def set_Advice(self, Advice): self.Advice = Advice
    def add_Advice(self, value): self.Advice.append(value)
    def insert_Advice_at(self, index, value): self.Advice.insert(index, value)
    def replace_Advice_at(self, index, value): self.Advice[index] = value
    def hasContent_(self):
        if (
            self.Advice
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AssociatedAdviceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AssociatedAdviceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssociatedAdviceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AssociatedAdviceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssociatedAdviceType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AssociatedAdviceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Advice_ in self.Advice:
            Advice_.export(outfile, level, namespace_='', name_='Advice', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Advice':
            obj_ = AdviceType.factory()
            obj_.build(child_)
            self.Advice.append(obj_)
            obj_.original_tagname_ = 'Advice'
# end class AssociatedAdviceType


class ObligationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ObligationId=None, AttributeAssignment=None):
        self.original_tagname_ = None
        self.ObligationId = _cast(None, ObligationId)
        if AttributeAssignment is None:
            self.AttributeAssignment = []
        else:
            self.AttributeAssignment = AttributeAssignment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObligationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObligationType.subclass:
            return ObligationType.subclass(*args_, **kwargs_)
        else:
            return ObligationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeAssignment(self): return self.AttributeAssignment
    def set_AttributeAssignment(self, AttributeAssignment): self.AttributeAssignment = AttributeAssignment
    def add_AttributeAssignment(self, value): self.AttributeAssignment.append(value)
    def insert_AttributeAssignment_at(self, index, value): self.AttributeAssignment.insert(index, value)
    def replace_AttributeAssignment_at(self, index, value): self.AttributeAssignment[index] = value
    def get_ObligationId(self): return self.ObligationId
    def set_ObligationId(self, ObligationId): self.ObligationId = ObligationId
    def hasContent_(self):
        if (
            self.AttributeAssignment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ObligationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObligationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObligationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ObligationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ObligationType'):
        if self.ObligationId is not None and 'ObligationId' not in already_processed:
            already_processed.add('ObligationId')
            outfile.write(' ObligationId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ObligationId), input_name='ObligationId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ObligationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeAssignment_ in self.AttributeAssignment:
            AttributeAssignment_.export(outfile, level, namespace_='', name_='AttributeAssignment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ObligationId', node)
        if value is not None and 'ObligationId' not in already_processed:
            already_processed.add('ObligationId')
            self.ObligationId = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeAssignment':
            obj_ = AttributeAssignmentType.factory()
            obj_.build(child_)
            self.AttributeAssignment.append(obj_)
            obj_.original_tagname_ = 'AttributeAssignment'
# end class ObligationType


class AdviceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AdviceId=None, AttributeAssignment=None):
        self.original_tagname_ = None
        self.AdviceId = _cast(None, AdviceId)
        if AttributeAssignment is None:
            self.AttributeAssignment = []
        else:
            self.AttributeAssignment = AttributeAssignment
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdviceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdviceType.subclass:
            return AdviceType.subclass(*args_, **kwargs_)
        else:
            return AdviceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeAssignment(self): return self.AttributeAssignment
    def set_AttributeAssignment(self, AttributeAssignment): self.AttributeAssignment = AttributeAssignment
    def add_AttributeAssignment(self, value): self.AttributeAssignment.append(value)
    def insert_AttributeAssignment_at(self, index, value): self.AttributeAssignment.insert(index, value)
    def replace_AttributeAssignment_at(self, index, value): self.AttributeAssignment[index] = value
    def get_AdviceId(self): return self.AdviceId
    def set_AdviceId(self, AdviceId): self.AdviceId = AdviceId
    def hasContent_(self):
        if (
            self.AttributeAssignment
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdviceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdviceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdviceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdviceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdviceType'):
        if self.AdviceId is not None and 'AdviceId' not in already_processed:
            already_processed.add('AdviceId')
            outfile.write(' AdviceId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AdviceId), input_name='AdviceId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AdviceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeAssignment_ in self.AttributeAssignment:
            AttributeAssignment_.export(outfile, level, namespace_='', name_='AttributeAssignment', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('AdviceId', node)
        if value is not None and 'AdviceId' not in already_processed:
            already_processed.add('AdviceId')
            self.AdviceId = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeAssignment':
            obj_ = AttributeAssignmentType.factory()
            obj_.build(child_)
            self.AttributeAssignment.append(obj_)
            obj_.original_tagname_ = 'AttributeAssignment'
# end class AdviceType


class ObligationExpressionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ObligationExpression=None):
        self.original_tagname_ = None
        if ObligationExpression is None:
            self.ObligationExpression = []
        else:
            self.ObligationExpression = ObligationExpression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObligationExpressionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObligationExpressionsType.subclass:
            return ObligationExpressionsType.subclass(*args_, **kwargs_)
        else:
            return ObligationExpressionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ObligationExpression(self): return self.ObligationExpression
    def set_ObligationExpression(self, ObligationExpression): self.ObligationExpression = ObligationExpression
    def add_ObligationExpression(self, value): self.ObligationExpression.append(value)
    def insert_ObligationExpression_at(self, index, value): self.ObligationExpression.insert(index, value)
    def replace_ObligationExpression_at(self, index, value): self.ObligationExpression[index] = value
    def hasContent_(self):
        if (
            self.ObligationExpression
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ObligationExpressionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObligationExpressionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObligationExpressionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ObligationExpressionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ObligationExpressionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ObligationExpressionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ObligationExpression_ in self.ObligationExpression:
            ObligationExpression_.export(outfile, level, namespace_='', name_='ObligationExpression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ObligationExpression':
            obj_ = ObligationExpressionType.factory()
            obj_.build(child_)
            self.ObligationExpression.append(obj_)
            obj_.original_tagname_ = 'ObligationExpression'
# end class ObligationExpressionsType


class AdviceExpressionsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AdviceExpression=None):
        self.original_tagname_ = None
        if AdviceExpression is None:
            self.AdviceExpression = []
        else:
            self.AdviceExpression = AdviceExpression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdviceExpressionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdviceExpressionsType.subclass:
            return AdviceExpressionsType.subclass(*args_, **kwargs_)
        else:
            return AdviceExpressionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AdviceExpression(self): return self.AdviceExpression
    def set_AdviceExpression(self, AdviceExpression): self.AdviceExpression = AdviceExpression
    def add_AdviceExpression(self, value): self.AdviceExpression.append(value)
    def insert_AdviceExpression_at(self, index, value): self.AdviceExpression.insert(index, value)
    def replace_AdviceExpression_at(self, index, value): self.AdviceExpression[index] = value
    def hasContent_(self):
        if (
            self.AdviceExpression
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdviceExpressionsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdviceExpressionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdviceExpressionsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdviceExpressionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdviceExpressionsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdviceExpressionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AdviceExpression_ in self.AdviceExpression:
            AdviceExpression_.export(outfile, level, namespace_='', name_='AdviceExpression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AdviceExpression':
            obj_ = AdviceExpressionType.factory()
            obj_.build(child_)
            self.AdviceExpression.append(obj_)
            obj_.original_tagname_ = 'AdviceExpression'
# end class AdviceExpressionsType


class ObligationExpressionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ObligationId=None, FulfillOn=None, AttributeAssignmentExpression=None):
        self.original_tagname_ = None
        self.ObligationId = _cast(None, ObligationId)
        self.FulfillOn = _cast(None, FulfillOn)
        if AttributeAssignmentExpression is None:
            self.AttributeAssignmentExpression = []
        else:
            self.AttributeAssignmentExpression = AttributeAssignmentExpression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObligationExpressionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObligationExpressionType.subclass:
            return ObligationExpressionType.subclass(*args_, **kwargs_)
        else:
            return ObligationExpressionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeAssignmentExpression(self): return self.AttributeAssignmentExpression
    def set_AttributeAssignmentExpression(self, AttributeAssignmentExpression): self.AttributeAssignmentExpression = AttributeAssignmentExpression
    def add_AttributeAssignmentExpression(self, value): self.AttributeAssignmentExpression.append(value)
    def insert_AttributeAssignmentExpression_at(self, index, value): self.AttributeAssignmentExpression.insert(index, value)
    def replace_AttributeAssignmentExpression_at(self, index, value): self.AttributeAssignmentExpression[index] = value
    def get_ObligationId(self): return self.ObligationId
    def set_ObligationId(self, ObligationId): self.ObligationId = ObligationId
    def get_FulfillOn(self): return self.FulfillOn
    def set_FulfillOn(self, FulfillOn): self.FulfillOn = FulfillOn
    def hasContent_(self):
        if (
            self.AttributeAssignmentExpression
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ObligationExpressionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObligationExpressionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObligationExpressionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ObligationExpressionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ObligationExpressionType'):
        if self.ObligationId is not None and 'ObligationId' not in already_processed:
            already_processed.add('ObligationId')
            outfile.write(' ObligationId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ObligationId), input_name='ObligationId')), ))
        if self.FulfillOn is not None and 'FulfillOn' not in already_processed:
            already_processed.add('FulfillOn')
            outfile.write(' FulfillOn=%s' % (quote_attrib(self.FulfillOn), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ObligationExpressionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeAssignmentExpression_ in self.AttributeAssignmentExpression:
            AttributeAssignmentExpression_.export(outfile, level, namespace_='', name_='AttributeAssignmentExpression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ObligationId', node)
        if value is not None and 'ObligationId' not in already_processed:
            already_processed.add('ObligationId')
            self.ObligationId = value
        value = find_attr_value_('FulfillOn', node)
        if value is not None and 'FulfillOn' not in already_processed:
            already_processed.add('FulfillOn')
            self.FulfillOn = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeAssignmentExpression':
            obj_ = AttributeAssignmentExpressionType.factory()
            obj_.build(child_)
            self.AttributeAssignmentExpression.append(obj_)
            obj_.original_tagname_ = 'AttributeAssignmentExpression'
# end class ObligationExpressionType


class AdviceExpressionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AdviceId=None, AppliesTo=None, AttributeAssignmentExpression=None):
        self.original_tagname_ = None
        self.AdviceId = _cast(None, AdviceId)
        self.AppliesTo = _cast(None, AppliesTo)
        if AttributeAssignmentExpression is None:
            self.AttributeAssignmentExpression = []
        else:
            self.AttributeAssignmentExpression = AttributeAssignmentExpression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AdviceExpressionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AdviceExpressionType.subclass:
            return AdviceExpressionType.subclass(*args_, **kwargs_)
        else:
            return AdviceExpressionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeAssignmentExpression(self): return self.AttributeAssignmentExpression
    def set_AttributeAssignmentExpression(self, AttributeAssignmentExpression): self.AttributeAssignmentExpression = AttributeAssignmentExpression
    def add_AttributeAssignmentExpression(self, value): self.AttributeAssignmentExpression.append(value)
    def insert_AttributeAssignmentExpression_at(self, index, value): self.AttributeAssignmentExpression.insert(index, value)
    def replace_AttributeAssignmentExpression_at(self, index, value): self.AttributeAssignmentExpression[index] = value
    def get_AdviceId(self): return self.AdviceId
    def set_AdviceId(self, AdviceId): self.AdviceId = AdviceId
    def get_AppliesTo(self): return self.AppliesTo
    def set_AppliesTo(self, AppliesTo): self.AppliesTo = AppliesTo
    def hasContent_(self):
        if (
            self.AttributeAssignmentExpression
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AdviceExpressionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AdviceExpressionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdviceExpressionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AdviceExpressionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdviceExpressionType'):
        if self.AdviceId is not None and 'AdviceId' not in already_processed:
            already_processed.add('AdviceId')
            outfile.write(' AdviceId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AdviceId), input_name='AdviceId')), ))
        if self.AppliesTo is not None and 'AppliesTo' not in already_processed:
            already_processed.add('AppliesTo')
            outfile.write(' AppliesTo=%s' % (quote_attrib(self.AppliesTo), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AdviceExpressionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AttributeAssignmentExpression_ in self.AttributeAssignmentExpression:
            AttributeAssignmentExpression_.export(outfile, level, namespace_='', name_='AttributeAssignmentExpression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('AdviceId', node)
        if value is not None and 'AdviceId' not in already_processed:
            already_processed.add('AdviceId')
            self.AdviceId = value
        value = find_attr_value_('AppliesTo', node)
        if value is not None and 'AppliesTo' not in already_processed:
            already_processed.add('AppliesTo')
            self.AppliesTo = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeAssignmentExpression':
            obj_ = AttributeAssignmentExpressionType.factory()
            obj_.build(child_)
            self.AttributeAssignmentExpression.append(obj_)
            obj_.original_tagname_ = 'AttributeAssignmentExpression'
# end class AdviceExpressionType


class AttributeAssignmentExpressionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AttributeId=None, Category=None, Issuer=None, Expression=None):
        self.original_tagname_ = None
        self.AttributeId = _cast(None, AttributeId)
        self.Category = _cast(None, Category)
        self.Issuer = _cast(None, Issuer)
        self.Expression = Expression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributeAssignmentExpressionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributeAssignmentExpressionType.subclass:
            return AttributeAssignmentExpressionType.subclass(*args_, **kwargs_)
        else:
            return AttributeAssignmentExpressionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Expression(self): return self.Expression
    def set_Expression(self, Expression): self.Expression = Expression
    def get_AttributeId(self): return self.AttributeId
    def set_AttributeId(self, AttributeId): self.AttributeId = AttributeId
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_Issuer(self): return self.Issuer
    def set_Issuer(self, Issuer): self.Issuer = Issuer
    def hasContent_(self):
        if (
            self.Expression is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributeAssignmentExpressionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributeAssignmentExpressionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeAssignmentExpressionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttributeAssignmentExpressionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributeAssignmentExpressionType'):
        if self.AttributeId is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            outfile.write(' AttributeId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AttributeId), input_name='AttributeId')), ))
        if self.Category is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            outfile.write(' Category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Category), input_name='Category')), ))
        if self.Issuer is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            outfile.write(' Issuer=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Issuer), input_name='Issuer')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributeAssignmentExpressionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Expression is not None:
            self.Expression.export(outfile, level, namespace_, name_='Expression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('AttributeId', node)
        if value is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            self.AttributeId = value
        value = find_attr_value_('Category', node)
        if value is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            self.Category = value
        value = find_attr_value_('Issuer', node)
        if value is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            self.Issuer = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Expression':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <Expression> element')
            self.Expression = obj_
            obj_.original_tagname_ = 'Expression'
        elif nodeName_ == 'VariableReference':
            obj_ = VariableReferenceType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'VariableReference'
        elif nodeName_ == 'AttributeSelector':
            obj_ = AttributeSelectorType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeSelector'
        elif nodeName_ == 'AttributeDesignator':
            obj_ = AttributeDesignatorType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeDesignator'
        elif nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeValue'
        elif nodeName_ == 'Function':
            obj_ = FunctionType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'Function'
        elif nodeName_ == 'Apply':
            obj_ = ApplyType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'Apply'
# end class AttributeAssignmentExpressionType


class PolicySetType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PolicySetId=None, Version=None, PolicyCombiningAlgId=None, MaxDelegationDepth=None, Description=None, PolicyIssuer=None, PolicySetDefaults=None, Target=None, PolicySet=None, Policy=None, PolicySetIdReference=None, PolicyIdReference=None, CombinerParameters=None, PolicyCombinerParameters=None, PolicySetCombinerParameters=None, ObligationExpressions=None, AdviceExpressions=None):
        self.original_tagname_ = None
        self.PolicySetId = _cast(None, PolicySetId)
        self.Version = _cast(None, Version)
        self.PolicyCombiningAlgId = _cast(None, PolicyCombiningAlgId)
        self.MaxDelegationDepth = _cast(int, MaxDelegationDepth)
        self.Description = Description
        self.PolicyIssuer = PolicyIssuer
        self.PolicySetDefaults = PolicySetDefaults
        self.Target = Target
        if PolicySet is None:
            self.PolicySet = []
        else:
            self.PolicySet = PolicySet
        if Policy is None:
            self.Policy = []
        else:
            self.Policy = Policy
        if PolicySetIdReference is None:
            self.PolicySetIdReference = []
        else:
            self.PolicySetIdReference = PolicySetIdReference
        if PolicyIdReference is None:
            self.PolicyIdReference = []
        else:
            self.PolicyIdReference = PolicyIdReference
        if CombinerParameters is None:
            self.CombinerParameters = []
        else:
            self.CombinerParameters = CombinerParameters
        if PolicyCombinerParameters is None:
            self.PolicyCombinerParameters = []
        else:
            self.PolicyCombinerParameters = PolicyCombinerParameters
        if PolicySetCombinerParameters is None:
            self.PolicySetCombinerParameters = []
        else:
            self.PolicySetCombinerParameters = PolicySetCombinerParameters
        self.ObligationExpressions = ObligationExpressions
        self.AdviceExpressions = AdviceExpressions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PolicySetType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PolicySetType.subclass:
            return PolicySetType.subclass(*args_, **kwargs_)
        else:
            return PolicySetType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PolicyIssuer(self): return self.PolicyIssuer
    def set_PolicyIssuer(self, PolicyIssuer): self.PolicyIssuer = PolicyIssuer
    def get_PolicySetDefaults(self): return self.PolicySetDefaults
    def set_PolicySetDefaults(self, PolicySetDefaults): self.PolicySetDefaults = PolicySetDefaults
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_PolicySet(self): return self.PolicySet
    def set_PolicySet(self, PolicySet): self.PolicySet = PolicySet
    def add_PolicySet(self, value): self.PolicySet.append(value)
    def insert_PolicySet_at(self, index, value): self.PolicySet.insert(index, value)
    def replace_PolicySet_at(self, index, value): self.PolicySet[index] = value
    def get_Policy(self): return self.Policy
    def set_Policy(self, Policy): self.Policy = Policy
    def add_Policy(self, value): self.Policy.append(value)
    def insert_Policy_at(self, index, value): self.Policy.insert(index, value)
    def replace_Policy_at(self, index, value): self.Policy[index] = value
    def get_PolicySetIdReference(self): return self.PolicySetIdReference
    def set_PolicySetIdReference(self, PolicySetIdReference): self.PolicySetIdReference = PolicySetIdReference
    def add_PolicySetIdReference(self, value): self.PolicySetIdReference.append(value)
    def insert_PolicySetIdReference_at(self, index, value): self.PolicySetIdReference.insert(index, value)
    def replace_PolicySetIdReference_at(self, index, value): self.PolicySetIdReference[index] = value
    def get_PolicyIdReference(self): return self.PolicyIdReference
    def set_PolicyIdReference(self, PolicyIdReference): self.PolicyIdReference = PolicyIdReference
    def add_PolicyIdReference(self, value): self.PolicyIdReference.append(value)
    def insert_PolicyIdReference_at(self, index, value): self.PolicyIdReference.insert(index, value)
    def replace_PolicyIdReference_at(self, index, value): self.PolicyIdReference[index] = value
    def get_CombinerParameters(self): return self.CombinerParameters
    def set_CombinerParameters(self, CombinerParameters): self.CombinerParameters = CombinerParameters
    def add_CombinerParameters(self, value): self.CombinerParameters.append(value)
    def insert_CombinerParameters_at(self, index, value): self.CombinerParameters.insert(index, value)
    def replace_CombinerParameters_at(self, index, value): self.CombinerParameters[index] = value
    def get_PolicyCombinerParameters(self): return self.PolicyCombinerParameters
    def set_PolicyCombinerParameters(self, PolicyCombinerParameters): self.PolicyCombinerParameters = PolicyCombinerParameters
    def add_PolicyCombinerParameters(self, value): self.PolicyCombinerParameters.append(value)
    def insert_PolicyCombinerParameters_at(self, index, value): self.PolicyCombinerParameters.insert(index, value)
    def replace_PolicyCombinerParameters_at(self, index, value): self.PolicyCombinerParameters[index] = value
    def get_PolicySetCombinerParameters(self): return self.PolicySetCombinerParameters
    def set_PolicySetCombinerParameters(self, PolicySetCombinerParameters): self.PolicySetCombinerParameters = PolicySetCombinerParameters
    def add_PolicySetCombinerParameters(self, value): self.PolicySetCombinerParameters.append(value)
    def insert_PolicySetCombinerParameters_at(self, index, value): self.PolicySetCombinerParameters.insert(index, value)
    def replace_PolicySetCombinerParameters_at(self, index, value): self.PolicySetCombinerParameters[index] = value
    def get_ObligationExpressions(self): return self.ObligationExpressions
    def set_ObligationExpressions(self, ObligationExpressions): self.ObligationExpressions = ObligationExpressions
    def get_AdviceExpressions(self): return self.AdviceExpressions
    def set_AdviceExpressions(self, AdviceExpressions): self.AdviceExpressions = AdviceExpressions
    def get_PolicySetId(self): return self.PolicySetId
    def set_PolicySetId(self, PolicySetId): self.PolicySetId = PolicySetId
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_PolicyCombiningAlgId(self): return self.PolicyCombiningAlgId
    def set_PolicyCombiningAlgId(self, PolicyCombiningAlgId): self.PolicyCombiningAlgId = PolicyCombiningAlgId
    def get_MaxDelegationDepth(self): return self.MaxDelegationDepth
    def set_MaxDelegationDepth(self, MaxDelegationDepth): self.MaxDelegationDepth = MaxDelegationDepth
    def hasContent_(self):
        if (
            self.Description is not None or
            self.PolicyIssuer is not None or
            self.PolicySetDefaults is not None or
            self.Target is not None or
            self.PolicySet or
            self.Policy or
            self.PolicySetIdReference or
            self.PolicyIdReference or
            self.CombinerParameters or
            self.PolicyCombinerParameters or
            self.PolicySetCombinerParameters or
            self.ObligationExpressions is not None or
            self.AdviceExpressions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PolicySetType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PolicySetType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PolicySetType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PolicySetType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PolicySetType'):
        if self.PolicySetId is not None and 'PolicySetId' not in already_processed:
            already_processed.add('PolicySetId')
            outfile.write(' PolicySetId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PolicySetId), input_name='PolicySetId')), ))
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            outfile.write(' Version=%s' % (quote_attrib(self.Version), ))
        if self.PolicyCombiningAlgId is not None and 'PolicyCombiningAlgId' not in already_processed:
            already_processed.add('PolicyCombiningAlgId')
            outfile.write(' PolicyCombiningAlgId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PolicyCombiningAlgId), input_name='PolicyCombiningAlgId')), ))
        if self.MaxDelegationDepth is not None and 'MaxDelegationDepth' not in already_processed:
            already_processed.add('MaxDelegationDepth')
            outfile.write(' MaxDelegationDepth="%s"' % self.gds_format_integer(self.MaxDelegationDepth, input_name='MaxDelegationDepth'))
    def exportChildren(self, outfile, level, namespace_='', name_='PolicySetType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:Description>%s</xacml:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PolicyIssuer is not None:
            self.PolicyIssuer.export(outfile, level, namespace_='', name_='PolicyIssuer', pretty_print=pretty_print)
        if self.PolicySetDefaults is not None:
            self.PolicySetDefaults.export(outfile, level, namespace_='', name_='PolicySetDefaults', pretty_print=pretty_print)
        if self.Target is not None:
            self.Target.export(outfile, level, namespace_='', name_='Target', pretty_print=pretty_print)
        for PolicySet_ in self.PolicySet:
            PolicySet_.export(outfile, level, namespace_='', name_='PolicySet', pretty_print=pretty_print)
        for Policy_ in self.Policy:
            Policy_.export(outfile, level, namespace_='', name_='Policy', pretty_print=pretty_print)
        for PolicySetIdReference_ in self.PolicySetIdReference:
            PolicySetIdReference_.export(outfile, level, namespace_='', name_='PolicySetIdReference', pretty_print=pretty_print)
        for PolicyIdReference_ in self.PolicyIdReference:
            PolicyIdReference_.export(outfile, level, namespace_='', name_='PolicyIdReference', pretty_print=pretty_print)
        for CombinerParameters_ in self.CombinerParameters:
            CombinerParameters_.export(outfile, level, namespace_='', name_='CombinerParameters', pretty_print=pretty_print)
        for PolicyCombinerParameters_ in self.PolicyCombinerParameters:
            PolicyCombinerParameters_.export(outfile, level, namespace_='', name_='PolicyCombinerParameters', pretty_print=pretty_print)
        for PolicySetCombinerParameters_ in self.PolicySetCombinerParameters:
            PolicySetCombinerParameters_.export(outfile, level, namespace_='', name_='PolicySetCombinerParameters', pretty_print=pretty_print)
        if self.ObligationExpressions is not None:
            self.ObligationExpressions.export(outfile, level, namespace_='', name_='ObligationExpressions', pretty_print=pretty_print)
        if self.AdviceExpressions is not None:
            self.AdviceExpressions.export(outfile, level, namespace_='', name_='AdviceExpressions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('PolicySetId', node)
        if value is not None and 'PolicySetId' not in already_processed:
            already_processed.add('PolicySetId')
            self.PolicySetId = value
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            self.Version = value
        value = find_attr_value_('PolicyCombiningAlgId', node)
        if value is not None and 'PolicyCombiningAlgId' not in already_processed:
            already_processed.add('PolicyCombiningAlgId')
            self.PolicyCombiningAlgId = value
        value = find_attr_value_('MaxDelegationDepth', node)
        if value is not None and 'MaxDelegationDepth' not in already_processed:
            already_processed.add('MaxDelegationDepth')
            try:
                self.MaxDelegationDepth = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            Description_ = mo_.group(1)
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PolicyIssuer':
            obj_ = PolicyIssuerType.factory()
            obj_.build(child_)
            self.PolicyIssuer = obj_
            obj_.original_tagname_ = 'PolicyIssuer'
        elif nodeName_ == 'PolicySetDefaults':
            obj_ = DefaultsType.factory()
            obj_.build(child_)
            self.PolicySetDefaults = obj_
            obj_.original_tagname_ = 'PolicySetDefaults'
        elif nodeName_ == 'Target':
            obj_ = TargetType.factory()
            obj_.build(child_)
            self.Target = obj_
            obj_.original_tagname_ = 'Target'
        elif nodeName_ == 'PolicySet':
            obj_ = PolicySetType.factory()
            obj_.build(child_)
            self.PolicySet.append(obj_)
            obj_.original_tagname_ = 'PolicySet'
        elif nodeName_ == 'Policy':
            obj_ = Policy.factory()
            obj_.build(child_)
            self.Policy.append(obj_)
            obj_.original_tagname_ = 'Policy'
        elif nodeName_ == 'PolicySetIdReference':
            obj_ = IdReferenceType.factory()
            obj_.build(child_)
            self.PolicySetIdReference.append(obj_)
            obj_.original_tagname_ = 'PolicySetIdReference'
        elif nodeName_ == 'PolicyIdReference':
            obj_ = IdReferenceType.factory()
            obj_.build(child_)
            self.PolicyIdReference.append(obj_)
            obj_.original_tagname_ = 'PolicyIdReference'
        elif nodeName_ == 'CombinerParameters':
            class_obj_ = self.get_class_obj_(child_, CombinerParametersType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.CombinerParameters.append(obj_)
            obj_.original_tagname_ = 'CombinerParameters'
        elif nodeName_ == 'PolicyCombinerParameters':
            obj_ = PolicyCombinerParametersType.factory()
            obj_.build(child_)
            self.PolicyCombinerParameters.append(obj_)
            obj_.original_tagname_ = 'PolicyCombinerParameters'
        elif nodeName_ == 'PolicySetCombinerParameters':
            obj_ = PolicySetCombinerParametersType.factory()
            obj_.build(child_)
            self.PolicySetCombinerParameters.append(obj_)
            obj_.original_tagname_ = 'PolicySetCombinerParameters'
        elif nodeName_ == 'ObligationExpressions':
            obj_ = ObligationExpressionsType.factory()
            obj_.build(child_)
            self.ObligationExpressions = obj_
            obj_.original_tagname_ = 'ObligationExpressions'
        elif nodeName_ == 'AdviceExpressions':
            obj_ = AdviceExpressionsType.factory()
            obj_.build(child_)
            self.AdviceExpressions = obj_
            obj_.original_tagname_ = 'AdviceExpressions'
# end class PolicySetType


class PolicyIssuerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Content=None, Attribute=None):
        self.original_tagname_ = None
        self.Content = Content
        if Attribute is None:
            self.Attribute = []
        else:
            self.Attribute = Attribute
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PolicyIssuerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PolicyIssuerType.subclass:
            return PolicyIssuerType.subclass(*args_, **kwargs_)
        else:
            return PolicyIssuerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Content(self): return self.Content
    def set_Content(self, Content): self.Content = Content
    def get_Attribute(self): return self.Attribute
    def set_Attribute(self, Attribute): self.Attribute = Attribute
    def add_Attribute(self, value): self.Attribute.append(value)
    def insert_Attribute_at(self, index, value): self.Attribute.insert(index, value)
    def replace_Attribute_at(self, index, value): self.Attribute[index] = value
    def hasContent_(self):
        if (
            self.Content is not None or
            self.Attribute
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PolicyIssuerType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PolicyIssuerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PolicyIssuerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PolicyIssuerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PolicyIssuerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PolicyIssuerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Content is not None:
            self.Content.export(outfile, level, namespace_='', name_='Content', pretty_print=pretty_print)
        for Attribute_ in self.Attribute:
            Attribute_.export(outfile, level, namespace_='', name_='Attribute', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Content':
            obj_ = ContentType.factory()
            obj_.build(child_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
        elif nodeName_ == 'Attribute':
            obj_ = AttributeType.factory()
            obj_.build(child_)
            self.Attribute.append(obj_)
            obj_.original_tagname_ = 'Attribute'
# end class PolicyIssuerType


class CombinerParametersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CombinerParameter=None, extensiontype_=None):
        self.original_tagname_ = None
        if CombinerParameter is None:
            self.CombinerParameter = []
        else:
            self.CombinerParameter = CombinerParameter
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CombinerParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CombinerParametersType.subclass:
            return CombinerParametersType.subclass(*args_, **kwargs_)
        else:
            return CombinerParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CombinerParameter(self): return self.CombinerParameter
    def set_CombinerParameter(self, CombinerParameter): self.CombinerParameter = CombinerParameter
    def add_CombinerParameter(self, value): self.CombinerParameter.append(value)
    def insert_CombinerParameter_at(self, index, value): self.CombinerParameter.insert(index, value)
    def replace_CombinerParameter_at(self, index, value): self.CombinerParameter[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.CombinerParameter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CombinerParametersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CombinerParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CombinerParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CombinerParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CombinerParametersType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CombinerParametersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CombinerParameter_ in self.CombinerParameter:
            CombinerParameter_.export(outfile, level, namespace_='', name_='CombinerParameter', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CombinerParameter':
            obj_ = CombinerParameterType.factory()
            obj_.build(child_)
            self.CombinerParameter.append(obj_)
            obj_.original_tagname_ = 'CombinerParameter'
# end class CombinerParametersType


class CombinerParameterType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ParameterName=None, AttributeValue=None):
        self.original_tagname_ = None
        self.ParameterName = _cast(None, ParameterName)
        self.AttributeValue = AttributeValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CombinerParameterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CombinerParameterType.subclass:
            return CombinerParameterType.subclass(*args_, **kwargs_)
        else:
            return CombinerParameterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeValue(self): return self.AttributeValue
    def set_AttributeValue(self, AttributeValue): self.AttributeValue = AttributeValue
    def get_ParameterName(self): return self.ParameterName
    def set_ParameterName(self, ParameterName): self.ParameterName = ParameterName
    def hasContent_(self):
        if (
            self.AttributeValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CombinerParameterType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CombinerParameterType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CombinerParameterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CombinerParameterType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CombinerParameterType'):
        if self.ParameterName is not None and 'ParameterName' not in already_processed:
            already_processed.add('ParameterName')
            outfile.write(' ParameterName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ParameterName), input_name='ParameterName')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CombinerParameterType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AttributeValue is not None:
            self.AttributeValue.export(outfile, level, namespace_='', name_='AttributeValue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('ParameterName', node)
        if value is not None and 'ParameterName' not in already_processed:
            already_processed.add('ParameterName')
            self.ParameterName = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AttributeValue = obj_
            obj_.original_tagname_ = 'AttributeValue'
# end class CombinerParameterType


class RuleCombinerParametersType(CombinerParametersType):
    subclass = None
    superclass = CombinerParametersType
    def __init__(self, CombinerParameter=None, RuleIdRef=None):
        self.original_tagname_ = None
        super(RuleCombinerParametersType, self).__init__(CombinerParameter, )
        self.RuleIdRef = _cast(None, RuleIdRef)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RuleCombinerParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RuleCombinerParametersType.subclass:
            return RuleCombinerParametersType.subclass(*args_, **kwargs_)
        else:
            return RuleCombinerParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_RuleIdRef(self): return self.RuleIdRef
    def set_RuleIdRef(self, RuleIdRef): self.RuleIdRef = RuleIdRef
    def hasContent_(self):
        if (
            super(RuleCombinerParametersType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RuleCombinerParametersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RuleCombinerParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RuleCombinerParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RuleCombinerParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RuleCombinerParametersType'):
        super(RuleCombinerParametersType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='RuleCombinerParametersType')
        if self.RuleIdRef is not None and 'RuleIdRef' not in already_processed:
            already_processed.add('RuleIdRef')
            outfile.write(' RuleIdRef=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RuleIdRef), input_name='RuleIdRef')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RuleCombinerParametersType', fromsubclass_=False, pretty_print=True):
        super(RuleCombinerParametersType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('RuleIdRef', node)
        if value is not None and 'RuleIdRef' not in already_processed:
            already_processed.add('RuleIdRef')
            self.RuleIdRef = value
        super(RuleCombinerParametersType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(RuleCombinerParametersType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class RuleCombinerParametersType


class PolicyCombinerParametersType(CombinerParametersType):
    subclass = None
    superclass = CombinerParametersType
    def __init__(self, CombinerParameter=None, PolicyIdRef=None):
        self.original_tagname_ = None
        super(PolicyCombinerParametersType, self).__init__(CombinerParameter, )
        self.PolicyIdRef = _cast(None, PolicyIdRef)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PolicyCombinerParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PolicyCombinerParametersType.subclass:
            return PolicyCombinerParametersType.subclass(*args_, **kwargs_)
        else:
            return PolicyCombinerParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PolicyIdRef(self): return self.PolicyIdRef
    def set_PolicyIdRef(self, PolicyIdRef): self.PolicyIdRef = PolicyIdRef
    def hasContent_(self):
        if (
            super(PolicyCombinerParametersType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PolicyCombinerParametersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PolicyCombinerParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PolicyCombinerParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PolicyCombinerParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PolicyCombinerParametersType'):
        super(PolicyCombinerParametersType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PolicyCombinerParametersType')
        if self.PolicyIdRef is not None and 'PolicyIdRef' not in already_processed:
            already_processed.add('PolicyIdRef')
            outfile.write(' PolicyIdRef=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PolicyIdRef), input_name='PolicyIdRef')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PolicyCombinerParametersType', fromsubclass_=False, pretty_print=True):
        super(PolicyCombinerParametersType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('PolicyIdRef', node)
        if value is not None and 'PolicyIdRef' not in already_processed:
            already_processed.add('PolicyIdRef')
            self.PolicyIdRef = value
        super(PolicyCombinerParametersType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PolicyCombinerParametersType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PolicyCombinerParametersType


class PolicySetCombinerParametersType(CombinerParametersType):
    subclass = None
    superclass = CombinerParametersType
    def __init__(self, CombinerParameter=None, PolicySetIdRef=None):
        self.original_tagname_ = None
        super(PolicySetCombinerParametersType, self).__init__(CombinerParameter, )
        self.PolicySetIdRef = _cast(None, PolicySetIdRef)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PolicySetCombinerParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PolicySetCombinerParametersType.subclass:
            return PolicySetCombinerParametersType.subclass(*args_, **kwargs_)
        else:
            return PolicySetCombinerParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PolicySetIdRef(self): return self.PolicySetIdRef
    def set_PolicySetIdRef(self, PolicySetIdRef): self.PolicySetIdRef = PolicySetIdRef
    def hasContent_(self):
        if (
            super(PolicySetCombinerParametersType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PolicySetCombinerParametersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PolicySetCombinerParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PolicySetCombinerParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PolicySetCombinerParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PolicySetCombinerParametersType'):
        super(PolicySetCombinerParametersType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PolicySetCombinerParametersType')
        if self.PolicySetIdRef is not None and 'PolicySetIdRef' not in already_processed:
            already_processed.add('PolicySetIdRef')
            outfile.write(' PolicySetIdRef=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.PolicySetIdRef), input_name='PolicySetIdRef')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PolicySetCombinerParametersType', fromsubclass_=False, pretty_print=True):
        super(PolicySetCombinerParametersType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('PolicySetIdRef', node)
        if value is not None and 'PolicySetIdRef' not in already_processed:
            already_processed.add('PolicySetIdRef')
            self.PolicySetIdRef = value
        super(PolicySetCombinerParametersType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PolicySetCombinerParametersType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PolicySetCombinerParametersType


class DefaultsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, XPathVersion=None):
        self.original_tagname_ = None
        self.XPathVersion = XPathVersion
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DefaultsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DefaultsType.subclass:
            return DefaultsType.subclass(*args_, **kwargs_)
        else:
            return DefaultsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_XPathVersion(self): return self.XPathVersion
    def set_XPathVersion(self, XPathVersion): self.XPathVersion = XPathVersion
    def hasContent_(self):
        if (
            self.XPathVersion is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DefaultsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DefaultsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DefaultsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DefaultsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DefaultsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DefaultsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.XPathVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:XPathVersion>%s</xacml:XPathVersion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.XPathVersion), input_name='XPathVersion')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'XPathVersion':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            XPathVersion_ = mo_.group(1)
            XPathVersion_ = self.gds_validate_string(XPathVersion_, node, 'XPathVersion')
            self.XPathVersion = XPathVersion_
# end class DefaultsType


class IdReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Version=None, EarliestVersion=None, LatestVersion=None, valueOf_=None):
        self.original_tagname_ = None
        self.Version = _cast(None, Version)
        self.EarliestVersion = _cast(None, EarliestVersion)
        self.LatestVersion = _cast(None, LatestVersion)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdReferenceType.subclass:
            return IdReferenceType.subclass(*args_, **kwargs_)
        else:
            return IdReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_EarliestVersion(self): return self.EarliestVersion
    def set_EarliestVersion(self, EarliestVersion): self.EarliestVersion = EarliestVersion
    def get_LatestVersion(self): return self.LatestVersion
    def set_LatestVersion(self, LatestVersion): self.LatestVersion = LatestVersion
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='IdReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IdReferenceType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='IdReferenceType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IdReferenceType'):
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            outfile.write(' Version=%s' % (quote_attrib(self.Version), ))
        if self.EarliestVersion is not None and 'EarliestVersion' not in already_processed:
            already_processed.add('EarliestVersion')
            outfile.write(' EarliestVersion=%s' % (quote_attrib(self.EarliestVersion), ))
        if self.LatestVersion is not None and 'LatestVersion' not in already_processed:
            already_processed.add('LatestVersion')
            outfile.write(' LatestVersion=%s' % (quote_attrib(self.LatestVersion), ))
    def exportChildren(self, outfile, level, namespace_='', name_='IdReferenceType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            self.Version = value
        value = find_attr_value_('EarliestVersion', node)
        if value is not None and 'EarliestVersion' not in already_processed:
            already_processed.add('EarliestVersion')
            self.EarliestVersion = value
        value = find_attr_value_('LatestVersion', node)
        if value is not None and 'LatestVersion' not in already_processed:
            already_processed.add('LatestVersion')
            self.LatestVersion = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IdReferenceType


class Policy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PolicyId=None, Version=None, RuleCombiningAlgId=None, MaxDelegationDepth=None, Description=None, PolicyIssuer=None, PolicyDefaults=None, Target=None, CombinerParameters=None, RuleCombinerParameters=None, VariableDefinition=None, Rule=None, ObligationExpressions=None, AdviceExpressions=None):
        self.original_tagname_ = None
        self.PolicyId = _cast(None, PolicyId)
        self.Version = _cast(None, Version)
        self.RuleCombiningAlgId = _cast(None, RuleCombiningAlgId)
        self.MaxDelegationDepth = _cast(int, MaxDelegationDepth)
        self.Description = Description
        self.PolicyIssuer = PolicyIssuer
        self.PolicyDefaults = PolicyDefaults
        self.Target = Target
        if CombinerParameters is None:
            self.CombinerParameters = []
        else:
            self.CombinerParameters = CombinerParameters
        if RuleCombinerParameters is None:
            self.RuleCombinerParameters = []
        else:
            self.RuleCombinerParameters = RuleCombinerParameters
        if VariableDefinition is None:
            self.VariableDefinition = []
        else:
            self.VariableDefinition = VariableDefinition
        if Rule is None:
            self.Rule = []
        else:
            self.Rule = Rule
        self.ObligationExpressions = ObligationExpressions
        self.AdviceExpressions = AdviceExpressions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Policy)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Policy.subclass:
            return Policy.subclass(*args_, **kwargs_)
        else:
            return Policy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_PolicyIssuer(self): return self.PolicyIssuer
    def set_PolicyIssuer(self, PolicyIssuer): self.PolicyIssuer = PolicyIssuer
    def get_PolicyDefaults(self): return self.PolicyDefaults
    def set_PolicyDefaults(self, PolicyDefaults): self.PolicyDefaults = PolicyDefaults
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_CombinerParameters(self): return self.CombinerParameters
    def set_CombinerParameters(self, CombinerParameters): self.CombinerParameters = CombinerParameters
    def add_CombinerParameters(self, value): self.CombinerParameters.append(value)
    def insert_CombinerParameters_at(self, index, value): self.CombinerParameters.insert(index, value)
    def replace_CombinerParameters_at(self, index, value): self.CombinerParameters[index] = value
    def get_RuleCombinerParameters(self): return self.RuleCombinerParameters
    def set_RuleCombinerParameters(self, RuleCombinerParameters): self.RuleCombinerParameters = RuleCombinerParameters
    def add_RuleCombinerParameters(self, value): self.RuleCombinerParameters.append(value)
    def insert_RuleCombinerParameters_at(self, index, value): self.RuleCombinerParameters.insert(index, value)
    def replace_RuleCombinerParameters_at(self, index, value): self.RuleCombinerParameters[index] = value
    def get_VariableDefinition(self): return self.VariableDefinition
    def set_VariableDefinition(self, VariableDefinition): self.VariableDefinition = VariableDefinition
    def add_VariableDefinition(self, value): self.VariableDefinition.append(value)
    def insert_VariableDefinition_at(self, index, value): self.VariableDefinition.insert(index, value)
    def replace_VariableDefinition_at(self, index, value): self.VariableDefinition[index] = value
    def get_Rule(self): return self.Rule
    def set_Rule(self, Rule): self.Rule = Rule
    def add_Rule(self, value): self.Rule.append(value)
    def insert_Rule_at(self, index, value): self.Rule.insert(index, value)
    def replace_Rule_at(self, index, value): self.Rule[index] = value
    def get_ObligationExpressions(self): return self.ObligationExpressions
    def set_ObligationExpressions(self, ObligationExpressions): self.ObligationExpressions = ObligationExpressions
    def get_AdviceExpressions(self): return self.AdviceExpressions
    def set_AdviceExpressions(self, AdviceExpressions): self.AdviceExpressions = AdviceExpressions
    def get_PolicyId(self): return self.PolicyId
    def set_PolicyId(self, PolicyId): self.PolicyId = PolicyId
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_RuleCombiningAlgId(self): return self.RuleCombiningAlgId
    def set_RuleCombiningAlgId(self, RuleCombiningAlgId): self.RuleCombiningAlgId = RuleCombiningAlgId
    def get_MaxDelegationDepth(self): return self.MaxDelegationDepth
    def set_MaxDelegationDepth(self, MaxDelegationDepth): self.MaxDelegationDepth = MaxDelegationDepth
    def hasContent_(self):
        if (
            self.Description is not None or
            self.PolicyIssuer is not None or
            self.PolicyDefaults is not None or
            self.Target is not None or
            self.CombinerParameters or
            self.RuleCombinerParameters or
            self.VariableDefinition or
            self.Rule or
            self.ObligationExpressions is not None or
            self.AdviceExpressions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Policy', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Policy')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Policy')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Policy', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Policy'):
        if self.PolicyId is not None and 'PolicyId' not in already_processed:
            already_processed.add('PolicyId')
            outfile.write(' xmlns=%s PolicyId=%s' % (quote_attrib("urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"),
                                                     self.gds_encode(self.gds_format_string(quote_attrib(self.PolicyId), input_name='PolicyId')), ))
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            outfile.write(' Version=%s' % (quote_attrib(self.Version), ))
        if self.RuleCombiningAlgId is not None and 'RuleCombiningAlgId' not in already_processed:
            already_processed.add('RuleCombiningAlgId')
            outfile.write(' RuleCombiningAlgId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RuleCombiningAlgId), input_name='RuleCombiningAlgId')), ))
        if self.MaxDelegationDepth is not None and 'MaxDelegationDepth' not in already_processed:
            already_processed.add('MaxDelegationDepth')
            outfile.write(' MaxDelegationDepth="%s"' % self.gds_format_integer(self.MaxDelegationDepth, input_name='MaxDelegationDepth'))
    def exportChildren(self, outfile, level, namespace_='', name_='Policy', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:Description>%s</xacml:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.PolicyIssuer is not None:
            self.PolicyIssuer.export(outfile, level, namespace_='', name_='PolicyIssuer', pretty_print=pretty_print)
        if self.PolicyDefaults is not None:
            self.PolicyDefaults.export(outfile, level, namespace_='', name_='PolicyDefaults', pretty_print=pretty_print)
        if self.Target is not None:
            self.Target.export(outfile, level, namespace_='', name_='Target', pretty_print=pretty_print)
        for CombinerParameters_ in self.CombinerParameters:
            CombinerParameters_.export(outfile, level, namespace_='', name_='CombinerParameters', pretty_print=pretty_print)
        for RuleCombinerParameters_ in self.RuleCombinerParameters:
            RuleCombinerParameters_.export(outfile, level, namespace_='', name_='RuleCombinerParameters', pretty_print=pretty_print)
        for VariableDefinition_ in self.VariableDefinition:
            VariableDefinition_.export(outfile, level, namespace_='', name_='VariableDefinition', pretty_print=pretty_print)
        for Rule_ in self.Rule:
            Rule_.export(outfile, level, namespace_='', name_='Rule', pretty_print=pretty_print)
        if self.ObligationExpressions is not None:
            self.ObligationExpressions.export(outfile, level, namespace_='', name_='ObligationExpressions', pretty_print=pretty_print)
        if self.AdviceExpressions is not None:
            self.AdviceExpressions.export(outfile, level, namespace_='', name_='AdviceExpressions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('PolicyId', node)
        if value is not None and 'PolicyId' not in already_processed:
            already_processed.add('PolicyId')
            self.PolicyId = value
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            self.Version = value
        value = find_attr_value_('RuleCombiningAlgId', node)
        if value is not None and 'RuleCombiningAlgId' not in already_processed:
            already_processed.add('RuleCombiningAlgId')
            self.RuleCombiningAlgId = value
        value = find_attr_value_('MaxDelegationDepth', node)
        if value is not None and 'MaxDelegationDepth' not in already_processed:
            already_processed.add('MaxDelegationDepth')
            try:
                self.MaxDelegationDepth = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            Description_ = mo_.group(1)
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'PolicyIssuer':
            obj_ = PolicyIssuerType.factory()
            obj_.build(child_)
            self.PolicyIssuer = obj_
            obj_.original_tagname_ = 'PolicyIssuer'
        elif nodeName_ == 'PolicyDefaults':
            obj_ = DefaultsType.factory()
            obj_.build(child_)
            self.PolicyDefaults = obj_
            obj_.original_tagname_ = 'PolicyDefaults'
        elif nodeName_ == 'Target':
            obj_ = TargetType.factory()
            obj_.build(child_)
            self.Target = obj_
            obj_.original_tagname_ = 'Target'
        elif nodeName_ == 'CombinerParameters':
            class_obj_ = self.get_class_obj_(child_, CombinerParametersType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.CombinerParameters.append(obj_)
            obj_.original_tagname_ = 'CombinerParameters'
        elif nodeName_ == 'RuleCombinerParameters':
            obj_ = RuleCombinerParametersType.factory()
            obj_.build(child_)
            self.RuleCombinerParameters.append(obj_)
            obj_.original_tagname_ = 'RuleCombinerParameters'
        elif nodeName_ == 'VariableDefinition':
            obj_ = VariableDefinitionType.factory()
            obj_.build(child_)
            self.VariableDefinition.append(obj_)
            obj_.original_tagname_ = 'VariableDefinition'
        elif nodeName_ == 'Rule':
            obj_ = RuleType.factory()
            obj_.build(child_)
            self.Rule.append(obj_)
            obj_.original_tagname_ = 'Rule'
        elif nodeName_ == 'ObligationExpressions':
            obj_ = ObligationExpressionsType.factory()
            obj_.build(child_)
            self.ObligationExpressions = obj_
            obj_.original_tagname_ = 'ObligationExpressions'
        elif nodeName_ == 'AdviceExpressions':
            obj_ = AdviceExpressionsType.factory()
            obj_.build(child_)
            self.AdviceExpressions = obj_
            obj_.original_tagname_ = 'AdviceExpressions'
# end class Policy


class RuleType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RuleId=None, Effect=None, Description=None, Target=None, Condition=None, ObligationExpressions=None, AdviceExpressions=None):
        self.original_tagname_ = None
        self.RuleId = _cast(None, RuleId)
        self.Effect = _cast(None, Effect)
        self.Description = Description
        self.Target = Target
        self.Condition = Condition
        self.ObligationExpressions = ObligationExpressions
        self.AdviceExpressions = AdviceExpressions
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RuleType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RuleType.subclass:
            return RuleType.subclass(*args_, **kwargs_)
        else:
            return RuleType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Condition(self): return self.Condition
    def set_Condition(self, Condition): self.Condition = Condition
    def get_ObligationExpressions(self): return self.ObligationExpressions
    def set_ObligationExpressions(self, ObligationExpressions): self.ObligationExpressions = ObligationExpressions
    def get_AdviceExpressions(self): return self.AdviceExpressions
    def set_AdviceExpressions(self, AdviceExpressions): self.AdviceExpressions = AdviceExpressions
    def get_RuleId(self): return self.RuleId
    def set_RuleId(self, RuleId): self.RuleId = RuleId
    def get_Effect(self): return self.Effect
    def set_Effect(self, Effect): self.Effect = Effect
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Target is not None or
            self.Condition is not None or
            self.ObligationExpressions is not None or
            self.AdviceExpressions is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RuleType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RuleType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RuleType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RuleType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RuleType'):
        if self.RuleId is not None and 'RuleId' not in already_processed:
            already_processed.add('RuleId')
            outfile.write(' RuleId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.RuleId), input_name='RuleId')), ))
        if self.Effect is not None and 'Effect' not in already_processed:
            already_processed.add('Effect')
            outfile.write(' Effect=%s' % (quote_attrib(self.Effect), ))
    def exportChildren(self, outfile, level, namespace_='', name_='RuleType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:Description>%s</xacml:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        if self.Target is not None:
            self.Target.export(outfile, level, namespace_='', name_='Target', pretty_print=pretty_print)
        if self.Condition is not None:
            self.Condition.export(outfile, level, namespace_='', name_='Condition', pretty_print=pretty_print)
        if self.ObligationExpressions is not None:
            self.ObligationExpressions.export(outfile, level, namespace_='', name_='ObligationExpressions', pretty_print=pretty_print)
        if self.AdviceExpressions is not None:
            self.AdviceExpressions.export(outfile, level, namespace_='', name_='AdviceExpressions', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('RuleId', node)
        if value is not None and 'RuleId' not in already_processed:
            already_processed.add('RuleId')
            self.RuleId = value
        value = find_attr_value_('Effect', node)
        if value is not None and 'Effect' not in already_processed:
            already_processed.add('Effect')
            self.Effect = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description':
            mo_ = PRESERVE_CDATA_TAGS_PAT.search(etree_.tostring(child_).strip())
            Description_ = mo_.group(1)
            Description_ = self.gds_validate_string(Description_, node, 'Description')
            self.Description = Description_
        elif nodeName_ == 'Target':
            obj_ = TargetType.factory()
            obj_.build(child_)
            self.Target = obj_
            obj_.original_tagname_ = 'Target'
        elif nodeName_ == 'Condition':
            obj_ = ConditionType.factory()
            obj_.build(child_)
            self.Condition = obj_
            obj_.original_tagname_ = 'Condition'
        elif nodeName_ == 'ObligationExpressions':
            obj_ = ObligationExpressionsType.factory()
            obj_.build(child_)
            self.ObligationExpressions = obj_
            obj_.original_tagname_ = 'ObligationExpressions'
        elif nodeName_ == 'AdviceExpressions':
            obj_ = AdviceExpressionsType.factory()
            obj_.build(child_)
            self.AdviceExpressions = obj_
            obj_.original_tagname_ = 'AdviceExpressions'
# end class RuleType


class TargetType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AnyOf=None):
        self.original_tagname_ = None
        if AnyOf is None:
            self.AnyOf = []
        else:
            self.AnyOf = AnyOf
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TargetType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TargetType.subclass:
            return TargetType.subclass(*args_, **kwargs_)
        else:
            return TargetType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AnyOf(self): return self.AnyOf
    def set_AnyOf(self, AnyOf): self.AnyOf = AnyOf
    def add_AnyOf(self, value): self.AnyOf.append(value)
    def insert_AnyOf_at(self, index, value): self.AnyOf.insert(index, value)
    def replace_AnyOf_at(self, index, value): self.AnyOf[index] = value
    def hasContent_(self):
        if (
            self.AnyOf
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TargetType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TargetType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TargetType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TargetType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TargetType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TargetType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AnyOf_ in self.AnyOf:
            AnyOf_.export(outfile, level, namespace_='', name_='AnyOf', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AnyOf':
            obj_ = AnyOfType.factory()
            obj_.build(child_)
            self.AnyOf.append(obj_)
            obj_.original_tagname_ = 'AnyOf'
# end class TargetType


class AnyOfType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AllOf=None):
        self.original_tagname_ = None
        if AllOf is None:
            self.AllOf = []
        else:
            self.AllOf = AllOf
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnyOfType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnyOfType.subclass:
            return AnyOfType.subclass(*args_, **kwargs_)
        else:
            return AnyOfType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AllOf(self): return self.AllOf
    def set_AllOf(self, AllOf): self.AllOf = AllOf
    def add_AllOf(self, value): self.AllOf.append(value)
    def insert_AllOf_at(self, index, value): self.AllOf.insert(index, value)
    def replace_AllOf_at(self, index, value): self.AllOf[index] = value
    def hasContent_(self):
        if (
            self.AllOf
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AnyOfType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AnyOfType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnyOfType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AnyOfType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AnyOfType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AnyOfType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for AllOf_ in self.AllOf:
            AllOf_.export(outfile, level, namespace_='', name_='AllOf', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AllOf':
            obj_ = AllOfType.factory()
            obj_.build(child_)
            self.AllOf.append(obj_)
            obj_.original_tagname_ = 'AllOf'
# end class AnyOfType


class AllOfType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Match=None):
        self.original_tagname_ = None
        if Match is None:
            self.Match = []
        else:
            self.Match = Match
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllOfType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllOfType.subclass:
            return AllOfType.subclass(*args_, **kwargs_)
        else:
            return AllOfType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Match(self): return self.Match
    def set_Match(self, Match): self.Match = Match
    def add_Match(self, value): self.Match.append(value)
    def insert_Match_at(self, index, value): self.Match.insert(index, value)
    def replace_Match_at(self, index, value): self.Match[index] = value
    def hasContent_(self):
        if (
            self.Match
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AllOfType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AllOfType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllOfType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AllOfType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AllOfType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AllOfType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Match_ in self.Match:
            Match_.export(outfile, level, namespace_='', name_='Match', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Match':
            obj_ = MatchType.factory()
            obj_.build(child_)
            self.Match.append(obj_)
            obj_.original_tagname_ = 'Match'
# end class AllOfType


class MatchType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MatchId=None, AttributeValue=None, AttributeDesignator=None, AttributeSelector=None):
        self.original_tagname_ = None
        self.MatchId = _cast(None, MatchId)
        self.AttributeValue = AttributeValue
        self.AttributeDesignator = AttributeDesignator
        self.AttributeSelector = AttributeSelector
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MatchType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MatchType.subclass:
            return MatchType.subclass(*args_, **kwargs_)
        else:
            return MatchType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeValue(self): return self.AttributeValue
    def set_AttributeValue(self, AttributeValue): self.AttributeValue = AttributeValue
    def get_AttributeDesignator(self): return self.AttributeDesignator
    def set_AttributeDesignator(self, AttributeDesignator): self.AttributeDesignator = AttributeDesignator
    def get_AttributeSelector(self): return self.AttributeSelector
    def set_AttributeSelector(self, AttributeSelector): self.AttributeSelector = AttributeSelector
    def get_MatchId(self): return self.MatchId
    def set_MatchId(self, MatchId): self.MatchId = MatchId
    def hasContent_(self):
        if (
            self.AttributeValue is not None or
            self.AttributeDesignator is not None or
            self.AttributeSelector is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MatchType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MatchType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MatchType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MatchType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MatchType'):
        if self.MatchId is not None and 'MatchId' not in already_processed:
            already_processed.add('MatchId')
            outfile.write(' MatchId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.MatchId), input_name='MatchId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='MatchType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AttributeValue is not None:
            self.AttributeValue.export(outfile, level, namespace_='', name_='AttributeValue', pretty_print=pretty_print)
        if self.AttributeDesignator is not None:
            self.AttributeDesignator.export(outfile, level, namespace_='', name_='AttributeDesignator', pretty_print=pretty_print)
        if self.AttributeSelector is not None:
            self.AttributeSelector.export(outfile, level, namespace_='', name_='AttributeSelector', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MatchId', node)
        if value is not None and 'MatchId' not in already_processed:
            already_processed.add('MatchId')
            self.MatchId = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AttributeValue = obj_
            obj_.original_tagname_ = 'AttributeValue'
        elif nodeName_ == 'AttributeDesignator':
            obj_ = AttributeDesignatorType.factory()
            obj_.build(child_)
            self.AttributeDesignator = obj_
            obj_.original_tagname_ = 'AttributeDesignator'
        elif nodeName_ == 'AttributeSelector':
            obj_ = AttributeSelectorType.factory()
            obj_.build(child_)
            self.AttributeSelector = obj_
            obj_.original_tagname_ = 'AttributeSelector'
# end class MatchType


class VariableDefinitionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, VariableId=None, Expression=None):
        self.original_tagname_ = None
        self.VariableId = _cast(None, VariableId)
        self.Expression = Expression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableDefinitionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableDefinitionType.subclass:
            return VariableDefinitionType.subclass(*args_, **kwargs_)
        else:
            return VariableDefinitionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Expression(self): return self.Expression
    def set_Expression(self, Expression): self.Expression = Expression
    def get_VariableId(self): return self.VariableId
    def set_VariableId(self, VariableId): self.VariableId = VariableId
    def hasContent_(self):
        if (
            self.Expression is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VariableDefinitionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableDefinitionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VariableDefinitionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VariableDefinitionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VariableDefinitionType'):
        if self.VariableId is not None and 'VariableId' not in already_processed:
            already_processed.add('VariableId')
            outfile.write(' VariableId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.VariableId), input_name='VariableId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='VariableDefinitionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Expression is not None:
            self.Expression.export(outfile, level, namespace_, name_='Expression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('VariableId', node)
        if value is not None and 'VariableId' not in already_processed:
            already_processed.add('VariableId')
            self.VariableId = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Expression':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <Expression> element')
            self.Expression = obj_
            obj_.original_tagname_ = 'Expression'
        elif nodeName_ == 'VariableReference':
            obj_ = VariableReferenceType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'VariableReference'
        elif nodeName_ == 'AttributeSelector':
            obj_ = AttributeSelectorType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeSelector'
        elif nodeName_ == 'AttributeDesignator':
            obj_ = AttributeDesignatorType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeDesignator'
        elif nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeValue'
        elif nodeName_ == 'Function':
            obj_ = FunctionType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'Function'
        elif nodeName_ == 'Apply':
            obj_ = ApplyType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'Apply'
# end class VariableDefinitionType


class ExpressionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None, mixedclass_=None, content_=None, extensiontype_=None):
        self.original_tagname_ = None
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExpressionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExpressionType.subclass:
            return ExpressionType.subclass(*args_, **kwargs_)
        else:
            return ExpressionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ExpressionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExpressionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpressionType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExpressionType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExpressionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class ExpressionType


class VariableReferenceType(ExpressionType):
    subclass = None
    superclass = ExpressionType
    def __init__(self, VariableId=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        super(VariableReferenceType, self).__init__(valueOf_, mixedclass_, content_, )
        self.VariableId = _cast(None, VariableId)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VariableReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VariableReferenceType.subclass:
            return VariableReferenceType.subclass(*args_, **kwargs_)
        else:
            return VariableReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_VariableId(self): return self.VariableId
    def set_VariableId(self, VariableId): self.VariableId = VariableId
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(VariableReferenceType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VariableReferenceType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VariableReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VariableReferenceType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VariableReferenceType'):
        super(VariableReferenceType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='VariableReferenceType')
        if self.VariableId is not None and 'VariableId' not in already_processed:
            already_processed.add('VariableId')
            outfile.write(' VariableId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.VariableId), input_name='VariableId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='VariableReferenceType', fromsubclass_=False, pretty_print=True):
        super(VariableReferenceType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('VariableId', node)
        if value is not None and 'VariableId' not in already_processed:
            already_processed.add('VariableId')
            self.VariableId = value
        super(VariableReferenceType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(VariableReferenceType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class VariableReferenceType


class AttributeSelectorType(ExpressionType):
    subclass = None
    superclass = ExpressionType
    def __init__(self, Category=None, ContextSelectorId=None, Path=None, DataType=None, MustBePresent=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        super(AttributeSelectorType, self).__init__(valueOf_, mixedclass_, content_, )
        self.Category = _cast(None, Category)
        self.ContextSelectorId = _cast(None, ContextSelectorId)
        self.Path = _cast(None, Path)
        self.DataType = _cast(None, DataType)
        self.MustBePresent = _cast(bool, MustBePresent)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributeSelectorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributeSelectorType.subclass:
            return AttributeSelectorType.subclass(*args_, **kwargs_)
        else:
            return AttributeSelectorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_ContextSelectorId(self): return self.ContextSelectorId
    def set_ContextSelectorId(self, ContextSelectorId): self.ContextSelectorId = ContextSelectorId
    def get_Path(self): return self.Path
    def set_Path(self, Path): self.Path = Path
    def get_DataType(self): return self.DataType
    def set_DataType(self, DataType): self.DataType = DataType
    def get_MustBePresent(self): return self.MustBePresent
    def set_MustBePresent(self, MustBePresent): self.MustBePresent = MustBePresent
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(AttributeSelectorType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributeSelectorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributeSelectorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeSelectorType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributeSelectorType'):
        super(AttributeSelectorType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeSelectorType')
        if self.Category is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            outfile.write(' Category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Category), input_name='Category')), ))
        if self.ContextSelectorId is not None and 'ContextSelectorId' not in already_processed:
            already_processed.add('ContextSelectorId')
            outfile.write(' ContextSelectorId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.ContextSelectorId), input_name='ContextSelectorId')), ))
        if self.Path is not None and 'Path' not in already_processed:
            already_processed.add('Path')
            outfile.write(' Path=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Path), input_name='Path')), ))
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            outfile.write(' DataType=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DataType), input_name='DataType')), ))
        if self.MustBePresent is not None and 'MustBePresent' not in already_processed:
            already_processed.add('MustBePresent')
            outfile.write(' MustBePresent="%s"' % self.gds_format_boolean(self.MustBePresent, input_name='MustBePresent'))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributeSelectorType', fromsubclass_=False, pretty_print=True):
        super(AttributeSelectorType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Category', node)
        if value is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            self.Category = value
        value = find_attr_value_('ContextSelectorId', node)
        if value is not None and 'ContextSelectorId' not in already_processed:
            already_processed.add('ContextSelectorId')
            self.ContextSelectorId = value
        value = find_attr_value_('Path', node)
        if value is not None and 'Path' not in already_processed:
            already_processed.add('Path')
            self.Path = value
        value = find_attr_value_('DataType', node)
        if value is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            self.DataType = value
        value = find_attr_value_('MustBePresent', node)
        if value is not None and 'MustBePresent' not in already_processed:
            already_processed.add('MustBePresent')
            if value in ('true', '1'):
                self.MustBePresent = True
            elif value in ('false', '0'):
                self.MustBePresent = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        super(AttributeSelectorType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(AttributeSelectorType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AttributeSelectorType


class AttributeDesignatorType(ExpressionType):
    subclass = None
    superclass = ExpressionType
    def __init__(self, Category=None, AttributeId=None, DataType=None, Issuer=None, MustBePresent=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        super(AttributeDesignatorType, self).__init__(valueOf_, mixedclass_, content_, )
        self.Category = _cast(None, Category)
        self.AttributeId = _cast(None, AttributeId)
        self.DataType = _cast(None, DataType)
        self.Issuer = _cast(None, Issuer)
        self.MustBePresent = _cast(bool, MustBePresent)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributeDesignatorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributeDesignatorType.subclass:
            return AttributeDesignatorType.subclass(*args_, **kwargs_)
        else:
            return AttributeDesignatorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_AttributeId(self): return self.AttributeId
    def set_AttributeId(self, AttributeId): self.AttributeId = AttributeId
    def get_DataType(self): return self.DataType
    def set_DataType(self, DataType): self.DataType = DataType
    def get_Issuer(self): return self.Issuer
    def set_Issuer(self, Issuer): self.Issuer = Issuer
    def get_MustBePresent(self): return self.MustBePresent
    def set_MustBePresent(self, MustBePresent): self.MustBePresent = MustBePresent
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(AttributeDesignatorType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributeDesignatorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributeDesignatorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeDesignatorType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributeDesignatorType'):
        super(AttributeDesignatorType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeDesignatorType')
        if self.Category is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            outfile.write(' Category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Category), input_name='Category')), ))
        if self.AttributeId is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            outfile.write(' AttributeId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AttributeId), input_name='AttributeId')), ))
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            outfile.write(' DataType=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DataType), input_name='DataType')), ))
        if self.Issuer is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            outfile.write(' Issuer=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Issuer), input_name='Issuer')), ))
        if self.MustBePresent is not None and 'MustBePresent' not in already_processed:
            already_processed.add('MustBePresent')
            outfile.write(' MustBePresent="%s"' % self.gds_format_boolean(self.MustBePresent, input_name='MustBePresent'))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributeDesignatorType', fromsubclass_=False, pretty_print=True):
        super(AttributeDesignatorType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Category', node)
        if value is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            self.Category = value
        value = find_attr_value_('AttributeId', node)
        if value is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            self.AttributeId = value
        value = find_attr_value_('DataType', node)
        if value is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            self.DataType = value
        value = find_attr_value_('Issuer', node)
        if value is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            self.Issuer = value
        value = find_attr_value_('MustBePresent', node)
        if value is not None and 'MustBePresent' not in already_processed:
            already_processed.add('MustBePresent')
            if value in ('true', '1'):
                self.MustBePresent = True
            elif value in ('false', '0'):
                self.MustBePresent = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        super(AttributeDesignatorType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(AttributeDesignatorType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AttributeDesignatorType


class AttributeValueType(ExpressionType):
    subclass = None
    superclass = ExpressionType
    def __init__(self, DataType=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None, extensiontype_=None):
        self.original_tagname_ = None
        super(AttributeValueType, self).__init__(valueOf_, mixedclass_, content_, extensiontype_, )
        self.DataType = _cast(None, DataType)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        self.anyAttributes_ = {}
        self.extensiontype_ = extensiontype_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributeValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributeValueType.subclass:
            return AttributeValueType.subclass(*args_, **kwargs_)
        else:
            return AttributeValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_DataType(self): return self.DataType
    def set_DataType(self, DataType): self.DataType = DataType
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_anyAttributes_(self): return self.anyAttributes_
    def set_anyAttributes_(self, anyAttributes_): self.anyAttributes_ = anyAttributes_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(AttributeValueType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributeValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributeValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttributeValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributeValueType'):
        unique_counter = 0
        for name, value in self.anyAttributes_.items():
            xsinamespaceprefix = 'xsi'
            xsinamespace1 = 'http://www.w3.org/2001/XMLSchema-instance'
            xsinamespace2 = '{%s}' % (xsinamespace1, )
            if name.startswith(xsinamespace2):
                name1 = name[len(xsinamespace2):]
                name2 = '%s:%s' % (xsinamespaceprefix, name1, )
                if name2 not in already_processed:
                    already_processed.add(name2)
                    outfile.write(' %s=%s' % (name2, quote_attrib(value), ))
            else:
                mo = re_.match(Namespace_extract_pat_, name)
                if mo is not None:
                    namespace, name = mo.group(1, 2)
                    if name not in already_processed:
                        already_processed.add(name)
                        if namespace == 'http://www.w3.org/XML/1998/namespace':
                            outfile.write(' %s=%s' % (
                                name, quote_attrib(value), ))
                        else:
                            unique_counter += 1
                            outfile.write(' xmlns:%d="%s"' % (
                                unique_counter, namespace, ))
                            outfile.write(' %d:%s=%s' % (
                                unique_counter, name, quote_attrib(value), ))
                else:
                    if name not in already_processed:
                        already_processed.add(name)
                        outfile.write(' %s=%s' % (
                            name, quote_attrib(value), ))
        super(AttributeValueType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeValueType')
        if self.DataType is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            outfile.write(' DataType=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.DataType), input_name='DataType')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='AttributeValueType', fromsubclass_=False, pretty_print=True):
        super(AttributeValueType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DataType', node)
        if value is not None and 'DataType' not in already_processed:
            already_processed.add('DataType')
            self.DataType = value
        self.anyAttributes_ = {}
        for name, value in attrs.items():
            if name not in already_processed:
                self.anyAttributes_[name] = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(AttributeValueType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(AttributeValueType, self).buildChildren(child_, node, nodeName_, True)
# end class AttributeValueType


class FunctionType(ExpressionType):
    subclass = None
    superclass = ExpressionType
    def __init__(self, FunctionId=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        super(FunctionType, self).__init__(valueOf_, mixedclass_, content_, )
        self.FunctionId = _cast(None, FunctionId)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FunctionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FunctionType.subclass:
            return FunctionType.subclass(*args_, **kwargs_)
        else:
            return FunctionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FunctionId(self): return self.FunctionId
    def set_FunctionId(self, FunctionId): self.FunctionId = FunctionId
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(FunctionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FunctionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FunctionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FunctionType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
        outfile.write(self.convert_unicode(self.valueOf_))
        outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FunctionType'):
        super(FunctionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='FunctionType')
        if self.FunctionId is not None and 'FunctionId' not in already_processed:
            already_processed.add('FunctionId')
            outfile.write(' FunctionId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FunctionId), input_name='FunctionId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='FunctionType', fromsubclass_=False, pretty_print=True):
        super(FunctionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('FunctionId', node)
        if value is not None and 'FunctionId' not in already_processed:
            already_processed.add('FunctionId')
            self.FunctionId = value
        super(FunctionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(FunctionType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class FunctionType


class ConditionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Expression=None):
        self.original_tagname_ = None
        self.Expression = Expression
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConditionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConditionType.subclass:
            return ConditionType.subclass(*args_, **kwargs_)
        else:
            return ConditionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Expression(self): return self.Expression
    def set_Expression(self, Expression): self.Expression = Expression
    def hasContent_(self):
        if (
            self.Expression is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ConditionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConditionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConditionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ConditionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ConditionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ConditionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Expression is not None:
            self.Expression.export(outfile, level, namespace_, name_='Expression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Expression':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <Expression> element')
            self.Expression = obj_
            obj_.original_tagname_ = 'Expression'
        elif nodeName_ == 'VariableReference':
            obj_ = VariableReferenceType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'VariableReference'
        elif nodeName_ == 'AttributeSelector':
            obj_ = AttributeSelectorType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeSelector'
        elif nodeName_ == 'AttributeDesignator':
            obj_ = AttributeDesignatorType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeDesignator'
        elif nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'AttributeValue'
        elif nodeName_ == 'Function':
            obj_ = FunctionType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'Function'
        elif nodeName_ == 'Apply':
            obj_ = ApplyType.factory()
            obj_.build(child_)
            self.Expression = obj_
            obj_.original_tagname_ = 'Apply'
# end class ConditionType


class ApplyType(ExpressionType):
    subclass = None
    superclass = ExpressionType
    def __init__(self, FunctionId=None, Description=None, Expression=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        super(ApplyType, self).__init__(valueOf_, mixedclass_, content_, )
        self.FunctionId = _cast(None, FunctionId)
        self.Description = Description
        if Expression is None:
            self.Expression = []
        else:
            self.Expression = Expression
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ApplyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ApplyType.subclass:
            return ApplyType.subclass(*args_, **kwargs_)
        else:
            return ApplyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Description(self): return self.Description
    def set_Description(self, Description): self.Description = Description
    def get_Expression(self): return self.Expression
    def set_Expression(self, Expression): self.Expression = Expression
    def add_Expression(self, value): self.Expression.append(value)
    def insert_Expression_at(self, index, value): self.Expression.insert(index, value)
    def replace_Expression_at(self, index, value): self.Expression[index] = value
    def get_FunctionId(self): return self.FunctionId
    def set_FunctionId(self, FunctionId): self.FunctionId = FunctionId
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.Description is not None or
            self.Expression or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(ApplyType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ApplyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ApplyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ApplyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ApplyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ApplyType'):
        super(ApplyType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ApplyType')
        if self.FunctionId is not None and 'FunctionId' not in already_processed:
            already_processed.add('FunctionId')
            outfile.write(' FunctionId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.FunctionId), input_name='FunctionId')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ApplyType', fromsubclass_=False, pretty_print=True):
        super(ApplyType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Description is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<xacml:Description>%s</xacml:Description>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Description), input_name='Description')), eol_))
        for Expression_ in self.Expression:
            Expression_.export(outfile, level, namespace_, name_='Expression', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('FunctionId', node)
        if value is not None and 'FunctionId' not in already_processed:
            already_processed.add('FunctionId')
            self.FunctionId = value
        super(ApplyType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Description' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'Description', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'Expression':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <Expression> element')
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Expression', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Expression'):
              self.add_Expression(obj_.value)
            elif hasattr(self, 'set_Expression'):
              self.set_Expression(obj_.value)
        elif nodeName_ == 'VariableReference':
            obj_ = VariableReferenceType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'VariableReference', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_VariableReference'):
              self.add_VariableReference(obj_.value)
            elif hasattr(self, 'set_VariableReference'):
              self.set_VariableReference(obj_.value)
        elif nodeName_ == 'AttributeSelector':
            obj_ = AttributeSelectorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AttributeSelector', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AttributeSelector'):
              self.add_AttributeSelector(obj_.value)
            elif hasattr(self, 'set_AttributeSelector'):
              self.set_AttributeSelector(obj_.value)
        elif nodeName_ == 'AttributeDesignator':
            obj_ = AttributeDesignatorType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AttributeDesignator', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AttributeDesignator'):
              self.add_AttributeDesignator(obj_.value)
            elif hasattr(self, 'set_AttributeDesignator'):
              self.set_AttributeDesignator(obj_.value)
        elif nodeName_ == 'AttributeValue':
            class_obj_ = self.get_class_obj_(child_, AttributeValueType)
            class_obj_ = AttributeValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'AttributeValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_AttributeValue'):
              self.add_AttributeValue(obj_.value)
            elif hasattr(self, 'set_AttributeValue'):
              self.set_AttributeValue(obj_.value)
        elif nodeName_ == 'Function':
            obj_ = FunctionType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Function', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Function'):
              self.add_Function(obj_.value)
            elif hasattr(self, 'set_Function'):
              self.set_Function(obj_.value)
        elif nodeName_ == 'Apply':
            obj_ = ApplyType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'Apply', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_Apply'):
              self.add_Apply(obj_.value)
            elif hasattr(self, 'set_Apply'):
              self.set_Apply(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(ApplyType, self).buildChildren(child_, node, nodeName_, True)
# end class ApplyType


class AttributeAssignmentType(AttributeValueType):
    subclass = None
    superclass = AttributeValueType
    def __init__(self, DataType=None, anytypeobjs_=None, AttributeId=None, Category=None, Issuer=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        super(AttributeAssignmentType, self).__init__(DataType, anytypeobjs_, valueOf_, mixedclass_, content_, )
        self.AttributeId = _cast(None, AttributeId)
        self.Category = _cast(None, Category)
        self.Issuer = _cast(None, Issuer)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttributeAssignmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttributeAssignmentType.subclass:
            return AttributeAssignmentType.subclass(*args_, **kwargs_)
        else:
            return AttributeAssignmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttributeId(self): return self.AttributeId
    def set_AttributeId(self, AttributeId): self.AttributeId = AttributeId
    def get_Category(self): return self.Category
    def set_Category(self, Category): self.Category = Category
    def get_Issuer(self): return self.Issuer
    def set_Issuer(self, Issuer): self.Issuer = Issuer
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(AttributeAssignmentType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttributeAssignmentType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttributeAssignmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeAssignmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttributeAssignmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttributeAssignmentType'):
        super(AttributeAssignmentType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AttributeAssignmentType')
        if self.AttributeId is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            outfile.write(' AttributeId=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.AttributeId), input_name='AttributeId')), ))
        if self.Category is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            outfile.write(' Category=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Category), input_name='Category')), ))
        if self.Issuer is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            outfile.write(' Issuer=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Issuer), input_name='Issuer')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AttributeAssignmentType', fromsubclass_=False, pretty_print=True):
        super(AttributeAssignmentType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('AttributeId', node)
        if value is not None and 'AttributeId' not in already_processed:
            already_processed.add('AttributeId')
            self.AttributeId = value
        value = find_attr_value_('Category', node)
        if value is not None and 'Category' not in already_processed:
            already_processed.add('Category')
            self.Category = value
        value = find_attr_value_('Issuer', node)
        if value is not None and 'Issuer' not in already_processed:
            already_processed.add('Issuer')
            self.Issuer = value
        super(AttributeAssignmentType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(AttributeAssignmentType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AttributeAssignmentType


GDSClassesMapping = {
    'Advice': AdviceType,
    'AdviceExpression': AdviceExpressionType,
    'AdviceExpressions': AdviceExpressionsType,
    'AllOf': AllOfType,
    'AnyOf': AnyOfType,
    'Apply': ApplyType,
    'AssociatedAdvice': AssociatedAdviceType,
    'Attribute': AttributeType,
    'AttributeAssignment': AttributeAssignmentType,
    'AttributeAssignmentExpression': AttributeAssignmentExpressionType,
    'AttributeDesignator': AttributeDesignatorType,
    'AttributeSelector': AttributeSelectorType,
    'AttributeValue': AttributeValueType,
    'Attributes': AttributesType,
    'AttributesReference': AttributesReferenceType,
    'CombinerParameter': CombinerParameterType,
    'CombinerParameters': CombinerParametersType,
    'Condition': ConditionType,
    'Content': ContentType,
    'Expression': ExpressionType,
    'Function': FunctionType,
    'Match': MatchType,
    'MissingAttributeDetail': MissingAttributeDetailType,
    'MultiRequests': MultiRequestsType,
    'Obligation': ObligationType,
    'ObligationExpression': ObligationExpressionType,
    'ObligationExpressions': ObligationExpressionsType,
    'Obligations': ObligationsType,
    'Policy': Policy,
    'PolicyCombinerParameters': PolicyCombinerParametersType,
    'PolicyDefaults': DefaultsType,
    'PolicyIdReference': IdReferenceType,
    'PolicyIdentifierList': PolicyIdentifierListType,
    'PolicyIssuer': PolicyIssuerType,
    'PolicySet': PolicySetType,
    'PolicySetCombinerParameters': PolicySetCombinerParametersType,
    'PolicySetDefaults': DefaultsType,
    'PolicySetIdReference': IdReferenceType,
    'Request': RequestType,
    'RequestDefaults': RequestDefaultsType,
    'RequestReference': RequestReferenceType,
    'Response': ResponseType,
    'Result': ResultType,
    'Rule': RuleType,
    'RuleCombinerParameters': RuleCombinerParametersType,
    'Status': StatusType,
    'StatusCode': StatusCodeType,
    'StatusDetail': StatusDetailType,
    'Target': TargetType,
    'VariableDefinition': VariableDefinitionType,
    'VariableReference': VariableReferenceType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = etree_.ETCompatXMLParser(strip_cdata=False)
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Policy'
        rootClass = Policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = etree_.ETCompatXMLParser(strip_cdata=False)
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Policy'
        rootClass = Policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = etree_.ETCompatXMLParser(strip_cdata=False)
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Policy'
        rootClass = Policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = etree_.ETCompatXMLParser(strip_cdata=False)
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Policy'
        rootClass = Policy
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from xacml_wd17v2 import *\n\n')
        sys.stdout.write('import xacml_wd17v2 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AdviceExpressionType",
    "AdviceExpressionsType",
    "AdviceType",
    "AllOfType",
    "AnyOfType",
    "ApplyType",
    "AssociatedAdviceType",
    "AttributeAssignmentExpressionType",
    "AttributeAssignmentType",
    "AttributeDesignatorType",
    "AttributeSelectorType",
    "AttributeType",
    "AttributeValueType",
    "AttributesReferenceType",
    "AttributesType",
    "CombinerParameterType",
    "CombinerParametersType",
    "ConditionType",
    "ContentType",
    "DefaultsType",
    "ExpressionType",
    "FunctionType",
    "IdReferenceType",
    "MatchType",
    "MissingAttributeDetailType",
    "MultiRequestsType",
    "ObligationExpressionType",
    "ObligationExpressionsType",
    "ObligationType",
    "ObligationsType",
    "Policy",
    "PolicyCombinerParametersType",
    "PolicyIdentifierListType",
    "PolicyIssuerType",
    "PolicySetCombinerParametersType",
    "PolicySetType",
    "RequestDefaultsType",
    "RequestReferenceType",
    "RequestType",
    "ResponseType",
    "ResultType",
    "RuleCombinerParametersType",
    "RuleType",
    "StatusCodeType",
    "StatusDetailType",
    "StatusType",
    "TargetType",
    "VariableDefinitionType",
    "VariableReferenceType"
]
